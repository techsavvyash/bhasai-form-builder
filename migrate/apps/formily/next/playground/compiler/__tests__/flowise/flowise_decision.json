{
  "nodes": [
    {
      "id": "start",
      "data": {
        "id": "start",
        "name": "start",
        "type": "Output",
        "label": "Start",
        "inputs": {},
        "outputs": {
          "startPointer": ""
        },
        "category": "Miscellaneous",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "Start pointer Points to node  ",
        "inputParams": [],
        "inputAnchors": [],
        "outputAnchors": [
          {
            "id": "start-output-startPointer-xMessage",
            "name": "startPointer",
            "type": "xMessage",
            "label": "start Pointer"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 113,
      "dragging": false,
      "position": {
        "x": 409.5560193025037,
        "y": 25.92199759211908
      },
      "selected": false,
      "positionAbsolute": {
        "x": 409.5560193025037,
        "y": 25.92199759211908
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_END",
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "type": "customNode",
      "data": {
        "label": "Code Runner Transformer",
        "name": "CODE_RUNNER",
        "type": "Output",
        "category": "GenericTransformer",
        "description": "A code runner capable of running custom JS code.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_5.data.instance",
            "CODE_RUNNER_STORE_5.data.instance"
          ],
          "code": "const msg = JSON.parse($0);\n\n    msg.payload.text = \"Thank you for completing the registration. Your responses have been recorded. Have a great day!\\n Your recorded answers are: \\n\";\n  \n    const formInput = msg.transformer.metaData.formInput;\n    if(formInput){\n      Object.keys(formInput).forEach((key) => {\n        msg.payload.text += key + \": \" + formInput[key] + \"\\n\";\n      });\n    }\n  return JSON.stringify(msg);"
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "CODE_RUNNER_END-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "Code",
            "name": "code",
            "type": "ide",
            "rows": 2,
            "id": "CODE_RUNNER_END-input-code-ide"
          },
          {
            "id": "CODE_RUNNER_END-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_END-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "CODE_RUNNER_END-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "CODE_RUNNER_END",
        "selected": false
      },
      "width": 300,
      "height": 569,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_0",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"mnaoe2gqapm\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": ["start.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_0",
      "data": {
        "id": "CODE_RUNNER_ASK_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"What is your name?\";\nmsg.transformer.metaData.currentQuestion=\"What is your name?\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is What is your name?`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"mnaoe2gqapm\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"mnaoe2gqapm\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_0",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_0.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_0-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_0-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_0-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_0-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_0-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_0-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_0",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_0",
      "data": {
        "id": "USER_FEEDBACK_LOOP_0",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_0.data.instance",
            "CODE_RUNNER_VALIDATION_0.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_0-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
      "data": {
        "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"mnaoe2gqapm\": {}\n      };\n    }\n  \n    if(msg.payload.text == \"SKIP\") {\n      msg.transformer.metaData.validationResult[\"mnaoe2gqapm\"] = {\n        \"skip-validation\": {\n          error: false,\n          message: \"User Skipped the message\"\n        }\n      }\n      return JSON.stringify(msg);\n    }\n    msg.transformer.metaData.currentInput[\"mnaoe2gqapm\"].text = msg.payload.text;\n  \n    msg.transformer.metaData.prompt = `\n    Given a user response and a question description, your task is to evaluate whether the user’s response correctly addresses the question. If the response is correct, confirm it. If the response is incorrect or incomplete, identify the issue, explain why the response is not sufficient, and provide guidance on how the user can improve their answer. If the user raises concerns or asks questions, address them while reiterating the original question to ensure clarity.\n\nYou are to always return the response in the form of JSON with three keys: “error”, “message”, and “response”.\n\n\t•\t“error” is a boolean key that should be true if the answer is not relevant to the question, and false if the answer is relevant or has been validated.\n\t•\t“message” should contain the reiterated response, including any necessary explanations or guidance.\n\t•\t“response” should extract and contain the useful information from the user’s response that directly answers the question. For example, if the question asks for a name and the user responds with “My name is John Doe,” the “response” key should have the value “John Doe”.\n\nEnsure that the response you send back is parseable by JSON.parse() in NodeJS. Only return stringified JSON, not markdown.\nHave a friendly and professional tone.\nInput:\n\t1.\tUser Response: ${msg.payload.text}\n\t2.\tQuestion Description: What is your name?\n\nOutput:\n\t•\tExample: {“error”: false, “message”: “Thanks for your response.”, “response”: “John Doe”}\n\t•\tExample: {“error”: true, “message”: “Your response is not relevant to the question.”, “response”: “”}\n    `;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_0",
      "data": {
        "id": "CODE_RUNNER_LLM_SKIP_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.payload.text == \"SKIP\") {\n      throw new Error(\"User Skipped the message\");\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_0",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_LLM_SKIP_0.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_0-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_0-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_0-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_0-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_0-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_0-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_0-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_0-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_0-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_0-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_0-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_0-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_0-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_0-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_0-input-languageProvider-string"
          },
          {
            "id": "LLM_0-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_0-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_0",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_0",
      "data": {
        "id": "CODE_RUNNER_LLM_VALIDATOR_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.validationResult[\"mnaoe2gqapm\"] = {\n      llm: JSON.parse(msg.payload.text),\n    }\n    if(!msg.transformer.metaData.validationResult[\"mnaoe2gqapm\"].llm.error){\n      msg.transformer.metaData.currentInput[\"mnaoe2gqapm\"].text = msg.transformer.metaData.validationResult[\"mnaoe2gqapm\"].llm.response;\n    }\n    return JSON.stringify(msg);\n  ",
          "xmessage": ["LLM_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_0",
      "data": {
        "id": "CODE_RUNNER_STORE_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"mnaoe2gqapm\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"mnaoe2gqapm\": \"\"};\n      } else {\n        formInput = {\"mnaoe2gqapm\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"mnaoe2gqapm\"][\"llm\"].error){\n        throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"mnaoe2gqapm\"].text;\n    if(formInput){\n      formInput = {...formInput, \"mnaoe2gqapm\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"mnaoe2gqapm\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_LLM_VALIDATOR_0.data.instance",
            "CODE_RUNNER_LLM_SKIP_0.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_0",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"mnaoe2gqapm\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"mnaoe2gqapm\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"mnaoe2gqapm\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"mnaoe2gqapm\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"Item\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_0.data.instance",
            "CODE_RUNNER_STORE_0.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_1",
      "data": {
        "id": "CODE_RUNNER_ASK_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Select Item\";\nmsg.transformer.metaData.currentQuestion=\"Select Item\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Select Item`;\n  msg.payload.buttonChoices ={\"header\":\"Select Item\",\"choices\":[{\"key\":\"I1\",\"text\":\"Item 1\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"I2\",\"text\":\"Item 2\",\"isEnabled\":true,\"showTextInput\":true}]};\n\n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"Item\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"Item\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_1",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_1.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_1-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_1-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_1-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_1-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_1-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_1-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_1",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_1",
      "data": {
        "id": "USER_FEEDBACK_LOOP_1",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_1.data.instance",
            "CODE_RUNNER_VALIDATION_1.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_1-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_1",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"Item\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"Item\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"Item\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"Item\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_1",
      "data": {
        "id": "CODE_RUNNER_STORE_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"Item\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"Item\": \"\"};\n      } else {\n        formInput = {\"Item\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"Item\"].text;\n    if(formInput){\n      formInput = {...formInput, \"Item\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"Item\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_1",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"Item\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"Item\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"Item\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_2",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"m9m5gkcuf3s\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_1.data.instance",
            "CODE_RUNNER_STORE_1.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_2",
      "data": {
        "id": "CODE_RUNNER_ASK_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Select Class\";\nmsg.transformer.metaData.currentQuestion=\"Select Class\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Select Class`;\n  msg.payload.buttonChoices ={\"header\":\"Select Class\",\"choices\":[{\"key\":\"Class 1\",\"text\":\"Class 1\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"Class 2\",\"text\":\"Class 2\",\"isEnabled\":true,\"showTextInput\":true}]};\n\n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"m9m5gkcuf3s\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"m9m5gkcuf3s\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_2.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_2",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_2.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_2-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_2-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_2-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_2-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_2-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_2-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_2",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_2",
      "data": {
        "id": "USER_FEEDBACK_LOOP_2",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_2.data.instance",
            "CODE_RUNNER_VALIDATION_2.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_2-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_2",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"m9m5gkcuf3s\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"m9m5gkcuf3s\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"m9m5gkcuf3s\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"m9m5gkcuf3s\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_2.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_2",
      "data": {
        "id": "CODE_RUNNER_STORE_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"m9m5gkcuf3s\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"m9m5gkcuf3s\": \"\"};\n      } else {\n        formInput = {\"m9m5gkcuf3s\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"m9m5gkcuf3s\"].text;\n    if(formInput){\n      formInput = {...formInput, \"m9m5gkcuf3s\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"m9m5gkcuf3s\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_2.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_2",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"m9m5gkcuf3s\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"m9m5gkcuf3s\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"m9m5gkcuf3s\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_2.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_3",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(formInput[\"Item\"] == \"I1\"\r\n&&\r\nformInput[\"m9m5gkcuf3s\"] == \"Class 1\")) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"iu4c4pioz6r\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_2.data.instance",
            "CODE_RUNNER_STORE_2.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_3",
      "data": {
        "id": "CODE_RUNNER_ASK_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Input for Item 1 and Class 1\";\nmsg.transformer.metaData.currentQuestion=\"Input for Item 1 and Class 1\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Input for Item 1 and Class 1`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"iu4c4pioz6r\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"iu4c4pioz6r\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_3.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_3",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_3.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_3-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_3-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_3-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_3-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_3-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_3-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_3",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_3",
      "data": {
        "id": "USER_FEEDBACK_LOOP_3",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_3.data.instance",
            "CODE_RUNNER_VALIDATION_3.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_3-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_3",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"iu4c4pioz6r\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"iu4c4pioz6r\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"iu4c4pioz6r\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"iu4c4pioz6r\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_3.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_3",
      "data": {
        "id": "CODE_RUNNER_STORE_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"iu4c4pioz6r\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"iu4c4pioz6r\": \"\"};\n      } else {\n        formInput = {\"iu4c4pioz6r\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"iu4c4pioz6r\"].text;\n    if(formInput){\n      formInput = {...formInput, \"iu4c4pioz6r\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"iu4c4pioz6r\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_3.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_3",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"iu4c4pioz6r\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"iu4c4pioz6r\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"iu4c4pioz6r\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_3.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_4",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(formInput[\"Item\"] == \"I2\")) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"4h8ww0pk8xx\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_3.data.instance",
            "CODE_RUNNER_STORE_3.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_4",
      "data": {
        "id": "CODE_RUNNER_ASK_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Input For Item 2 (Number)\";\nmsg.transformer.metaData.currentQuestion=\"Input For Item 2 (Number)\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Input For Item 2 (Number)`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"4h8ww0pk8xx\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"4h8ww0pk8xx\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_4",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_4.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_4-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_4-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_4-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_4-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_4-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_4-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_4",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_4",
      "data": {
        "id": "USER_FEEDBACK_LOOP_4",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_4.data.instance",
            "CODE_RUNNER_VALIDATION_4.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_4-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_4",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"4h8ww0pk8xx\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"4h8ww0pk8xx\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"4h8ww0pk8xx\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"4h8ww0pk8xx\"].text = msg.payload.text;\n  \n    const inputText = msg.transformer.metaData.currentInput[\"4h8ww0pk8xx\"].text;\n\n    let res;\n    const validationResult = msg.transformer.metaData.validationResult[\"4h8ww0pk8xx\"] || {};\n    \n        res = validator[\"number\"](inputText)\n        validationResult[\"number\"] = res;\n\n      msg.transformer.metaData.validationResult[\"4h8ww0pk8xx\"] = validationResult;\nreturn JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_4",
      "data": {
        "id": "CODE_RUNNER_STORE_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"4h8ww0pk8xx\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"4h8ww0pk8xx\": \"\"};\n      } else {\n        formInput = {\"4h8ww0pk8xx\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"4h8ww0pk8xx\"].number.error){\n          throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"4h8ww0pk8xx\"].text;\n    if(formInput){\n      formInput = {...formInput, \"4h8ww0pk8xx\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"4h8ww0pk8xx\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_4",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"4h8ww0pk8xx\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"4h8ww0pk8xx\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"4h8ww0pk8xx\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"4h8ww0pk8xx\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_5",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!((function(){\r\n if(formInput[\"m9m5gkcuf3s\"] == \"Class 2\") \r\n return true;\r\n return false;\r\n})())) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"n743nwese30\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_4.data.instance",
            "CODE_RUNNER_STORE_4.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_5",
      "data": {
        "id": "CODE_RUNNER_ASK_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Input For Class 2 (Email)\";\nmsg.transformer.metaData.currentQuestion=\"Input For Class 2 (Email)\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Input For Class 2 (Email)`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"n743nwese30\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"n743nwese30\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_5.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_5",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_5.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_5-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_5-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_5-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_5-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_5-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_5-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_5",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_5",
      "data": {
        "id": "USER_FEEDBACK_LOOP_5",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_5.data.instance",
            "CODE_RUNNER_VALIDATION_5.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_5-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_5",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"n743nwese30\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"n743nwese30\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"n743nwese30\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"n743nwese30\"].text = msg.payload.text;\n  \n    const inputText = msg.transformer.metaData.currentInput[\"n743nwese30\"].text;\n\n    let res;\n    const validationResult = msg.transformer.metaData.validationResult[\"n743nwese30\"] || {};\n    \n        res = validator[\"email\"](inputText)\n        validationResult[\"email\"] = res;\n\n      msg.transformer.metaData.validationResult[\"n743nwese30\"] = validationResult;\nreturn JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_5.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_5",
      "data": {
        "id": "CODE_RUNNER_STORE_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"n743nwese30\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"n743nwese30\": \"\"};\n      } else {\n        formInput = {\"n743nwese30\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"n743nwese30\"].email.error){\n          throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"n743nwese30\"].text;\n    if(formInput){\n      formInput = {...formInput, \"n743nwese30\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"n743nwese30\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_5.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_5",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"n743nwese30\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"n743nwese30\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"n743nwese30\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"n743nwese30\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_5.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    }
  ],
  "edges": [
    {
      "id": "CODE_RUNNER_isVISIBLE_0-CODE_RUNNER_ASK_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_0",
      "target": "CODE_RUNNER_ASK_0",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_0-LLM_LLM_ASK_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_0",
      "target": "LLM_LLM_ASK_0",
      "sourceHandle": "CODE_RUNNER_ASK_0-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_0-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_0-USER_FEEDBACK_LOOP_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_0",
      "target": "USER_FEEDBACK_LOOP_0",
      "sourceHandle": "LLM_LLM_ASK_0-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_0-CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_0",
      "target": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
      "sourceHandle": "USER_FEEDBACK_LOOP_0-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-CODE_RUNNER_LLM_SKIP_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
      "target": "CODE_RUNNER_LLM_SKIP_0",
      "sourceHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_SKIP_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_0-LLM_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_0",
      "target": "LLM_0",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_0-output-onSuccess-xMessage",
      "targetHandle": "LLM_0-input-xmessage-xMessage"
    },
    {
      "id": "LLM_0-CODE_RUNNER_LLM_VALIDATOR_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_0",
      "target": "CODE_RUNNER_LLM_VALIDATOR_0",
      "sourceHandle": "LLM_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_VALIDATOR_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_0-CODE_RUNNER_STORE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_VALIDATOR_0",
      "target": "CODE_RUNNER_STORE_0",
      "sourceHandle": "CODE_RUNNER_LLM_VALIDATOR_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_0-CODE_RUNNER_STORE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_0",
      "target": "CODE_RUNNER_STORE_0",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_0-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_0-CODE_RUNNER_VALIDATION_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_0",
      "target": "CODE_RUNNER_VALIDATION_0",
      "sourceHandle": "CODE_RUNNER_STORE_0-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_0-USER_FEEDBACK_LOOP_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_0",
      "target": "USER_FEEDBACK_LOOP_0",
      "sourceHandle": "CODE_RUNNER_VALIDATION_0-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1-CODE_RUNNER_ASK_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_1",
      "target": "CODE_RUNNER_ASK_1",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_1-LLM_LLM_ASK_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_1",
      "target": "LLM_LLM_ASK_1",
      "sourceHandle": "CODE_RUNNER_ASK_1-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_1-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_1-USER_FEEDBACK_LOOP_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_1",
      "target": "USER_FEEDBACK_LOOP_1",
      "sourceHandle": "LLM_LLM_ASK_1-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_1-CODE_RUNNER_RUN_VALIDATOR_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_1",
      "target": "CODE_RUNNER_RUN_VALIDATOR_1",
      "sourceHandle": "USER_FEEDBACK_LOOP_1-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_1-CODE_RUNNER_STORE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_1",
      "target": "CODE_RUNNER_STORE_1",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_1-CODE_RUNNER_VALIDATION_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_1",
      "target": "CODE_RUNNER_VALIDATION_1",
      "sourceHandle": "CODE_RUNNER_STORE_1-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_1-USER_FEEDBACK_LOOP_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_1",
      "target": "USER_FEEDBACK_LOOP_1",
      "sourceHandle": "CODE_RUNNER_VALIDATION_1-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_2-CODE_RUNNER_ASK_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_2",
      "target": "CODE_RUNNER_ASK_2",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_2-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_2-LLM_LLM_ASK_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_2",
      "target": "LLM_LLM_ASK_2",
      "sourceHandle": "CODE_RUNNER_ASK_2-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_2-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_2-USER_FEEDBACK_LOOP_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_2",
      "target": "USER_FEEDBACK_LOOP_2",
      "sourceHandle": "LLM_LLM_ASK_2-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_2-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_2-CODE_RUNNER_RUN_VALIDATOR_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_2",
      "target": "CODE_RUNNER_RUN_VALIDATOR_2",
      "sourceHandle": "USER_FEEDBACK_LOOP_2-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_2-CODE_RUNNER_STORE_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_2",
      "target": "CODE_RUNNER_STORE_2",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_2-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_2-CODE_RUNNER_VALIDATION_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_2",
      "target": "CODE_RUNNER_VALIDATION_2",
      "sourceHandle": "CODE_RUNNER_STORE_2-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_2-USER_FEEDBACK_LOOP_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_2",
      "target": "USER_FEEDBACK_LOOP_2",
      "sourceHandle": "CODE_RUNNER_VALIDATION_2-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_3-CODE_RUNNER_ASK_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_3",
      "target": "CODE_RUNNER_ASK_3",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_3-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_3-LLM_LLM_ASK_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_3",
      "target": "LLM_LLM_ASK_3",
      "sourceHandle": "CODE_RUNNER_ASK_3-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_3-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_3-USER_FEEDBACK_LOOP_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_3",
      "target": "USER_FEEDBACK_LOOP_3",
      "sourceHandle": "LLM_LLM_ASK_3-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_3-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_3-CODE_RUNNER_RUN_VALIDATOR_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_3",
      "target": "CODE_RUNNER_RUN_VALIDATOR_3",
      "sourceHandle": "USER_FEEDBACK_LOOP_3-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_3-CODE_RUNNER_STORE_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_3",
      "target": "CODE_RUNNER_STORE_3",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_3-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_3-CODE_RUNNER_VALIDATION_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_3",
      "target": "CODE_RUNNER_VALIDATION_3",
      "sourceHandle": "CODE_RUNNER_STORE_3-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_3-USER_FEEDBACK_LOOP_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_3",
      "target": "USER_FEEDBACK_LOOP_3",
      "sourceHandle": "CODE_RUNNER_VALIDATION_3-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_4-CODE_RUNNER_ASK_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_4",
      "target": "CODE_RUNNER_ASK_4",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_4-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_4-LLM_LLM_ASK_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_4",
      "target": "LLM_LLM_ASK_4",
      "sourceHandle": "CODE_RUNNER_ASK_4-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_4-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_4-USER_FEEDBACK_LOOP_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_4",
      "target": "USER_FEEDBACK_LOOP_4",
      "sourceHandle": "LLM_LLM_ASK_4-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_4-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_4-CODE_RUNNER_RUN_VALIDATOR_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_4",
      "target": "CODE_RUNNER_RUN_VALIDATOR_4",
      "sourceHandle": "USER_FEEDBACK_LOOP_4-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_4-CODE_RUNNER_STORE_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_4",
      "target": "CODE_RUNNER_STORE_4",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_4-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_4-CODE_RUNNER_VALIDATION_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_4",
      "target": "CODE_RUNNER_VALIDATION_4",
      "sourceHandle": "CODE_RUNNER_STORE_4-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_4-USER_FEEDBACK_LOOP_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_4",
      "target": "USER_FEEDBACK_LOOP_4",
      "sourceHandle": "CODE_RUNNER_VALIDATION_4-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_5-CODE_RUNNER_ASK_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_5",
      "target": "CODE_RUNNER_ASK_5",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_5-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_5-LLM_LLM_ASK_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_5",
      "target": "LLM_LLM_ASK_5",
      "sourceHandle": "CODE_RUNNER_ASK_5-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_5-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_5-USER_FEEDBACK_LOOP_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_5",
      "target": "USER_FEEDBACK_LOOP_5",
      "sourceHandle": "LLM_LLM_ASK_5-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_5-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_5-CODE_RUNNER_RUN_VALIDATOR_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_5",
      "target": "CODE_RUNNER_RUN_VALIDATOR_5",
      "sourceHandle": "USER_FEEDBACK_LOOP_5-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_5-CODE_RUNNER_STORE_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_5",
      "target": "CODE_RUNNER_STORE_5",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_5-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_5-CODE_RUNNER_VALIDATION_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_5",
      "target": "CODE_RUNNER_VALIDATION_5",
      "sourceHandle": "CODE_RUNNER_STORE_5-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_5-USER_FEEDBACK_LOOP_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_5",
      "target": "USER_FEEDBACK_LOOP_5",
      "sourceHandle": "CODE_RUNNER_VALIDATION_5-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_5-input-xmessage-xMessage"
    },
    {
      "id": "start-CODE_RUNNER_isVISIBLE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "start",
      "target": "CODE_RUNNER_isVISIBLE_0",
      "sourceHandle": "start-output-startPointer-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_0-CODE_RUNNER_isVISIBLE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_0",
      "target": "CODE_RUNNER_isVISIBLE_1",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_0-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_0-CODE_RUNNER_isVISIBLE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_0",
      "target": "CODE_RUNNER_isVISIBLE_1",
      "sourceHandle": "CODE_RUNNER_STORE_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1-CODE_RUNNER_isVISIBLE_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_1",
      "target": "CODE_RUNNER_isVISIBLE_2",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_1-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_1-CODE_RUNNER_isVISIBLE_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_1",
      "target": "CODE_RUNNER_isVISIBLE_2",
      "sourceHandle": "CODE_RUNNER_STORE_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_2-CODE_RUNNER_isVISIBLE_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_2",
      "target": "CODE_RUNNER_isVISIBLE_3",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_2-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_2-CODE_RUNNER_isVISIBLE_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_2",
      "target": "CODE_RUNNER_isVISIBLE_3",
      "sourceHandle": "CODE_RUNNER_STORE_2-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_3-CODE_RUNNER_isVISIBLE_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_3",
      "target": "CODE_RUNNER_isVISIBLE_4",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_3-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_3-CODE_RUNNER_isVISIBLE_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_3",
      "target": "CODE_RUNNER_isVISIBLE_4",
      "sourceHandle": "CODE_RUNNER_STORE_3-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_4-CODE_RUNNER_isVISIBLE_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_4",
      "target": "CODE_RUNNER_isVISIBLE_5",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_4-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_4-CODE_RUNNER_isVISIBLE_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_4",
      "target": "CODE_RUNNER_isVISIBLE_5",
      "sourceHandle": "CODE_RUNNER_STORE_4-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_5-CODE_RUNNER_END",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_5",
      "target": "CODE_RUNNER_END",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_5-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_END-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_5-CODE_RUNNER_END",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_5",
      "target": "CODE_RUNNER_END",
      "sourceHandle": "CODE_RUNNER_STORE_5-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_END-input-xmessage-xMessage"
    }
  ],
  "viewport": {
    "x": -89.25227931693917,
    "y": 282.4605317435965,
    "zoom": 0.4464677076656672
  },
  "name": ""
}
