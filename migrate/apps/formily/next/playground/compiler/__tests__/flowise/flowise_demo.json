{
  "nodes": [
    {
      "id": "start",
      "data": {
        "id": "start",
        "name": "start",
        "type": "Output",
        "label": "Start",
        "inputs": {},
        "outputs": {
          "startPointer": ""
        },
        "category": "Miscellaneous",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "Start pointer Points to node  ",
        "inputParams": [],
        "inputAnchors": [],
        "outputAnchors": [
          {
            "id": "start-output-startPointer-xMessage",
            "name": "startPointer",
            "type": "xMessage",
            "label": "start Pointer"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 113,
      "dragging": false,
      "position": {
        "x": 409.5560193025037,
        "y": 25.92199759211908
      },
      "selected": false,
      "positionAbsolute": {
        "x": 409.5560193025037,
        "y": 25.92199759211908
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_END",
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "type": "customNode",
      "data": {
        "label": "Code Runner Transformer",
        "name": "CODE_RUNNER",
        "type": "Output",
        "category": "GenericTransformer",
        "description": "A code runner capable of running custom JS code.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_5.data.instance",
            "CODE_RUNNER_STORE_5.data.instance",
            "CODE_RUNNER_isVISIBLE_15.data.instance",
            "CODE_RUNNER_STORE_15.data.instance"
          ],
          "code": "const msg = JSON.parse($0);\n\n    msg.payload.text = \"Thank you for completing the registration. Your responses have been recorded. Have a great day!\\n Your recorded answers are: \\n\";\n  \n    const formInput = msg.transformer.metaData.formInput;\n    if(formInput){\n      Object.keys(formInput).forEach((key) => {\n        msg.payload.text += key + \": \" + formInput[key] + \"\\n\";\n      });\n    }\n  return JSON.stringify(msg);"
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "CODE_RUNNER_END-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "Code",
            "name": "code",
            "type": "ide",
            "rows": 2,
            "id": "CODE_RUNNER_END-input-code-ide"
          },
          {
            "id": "CODE_RUNNER_END-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_END-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "CODE_RUNNER_END-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "CODE_RUNNER_END",
        "selected": false
      },
      "width": 300,
      "height": 569,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_0",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"tyfwvblhg64\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": ["start.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_0",
      "data": {
        "id": "CODE_RUNNER_ASK_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Write your name\";\nmsg.transformer.metaData.currentQuestion=\"Write your name\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Write your name`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"tyfwvblhg64\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"tyfwvblhg64\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_0",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_0.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_0-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_0-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_0-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_0-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_0-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_0-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_0",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_0",
      "data": {
        "id": "USER_FEEDBACK_LOOP_0",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_0.data.instance",
            "CODE_RUNNER_VALIDATION_0.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_0-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
      "data": {
        "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"tyfwvblhg64\": {}\n      };\n    }\n  \n    if(msg.payload.text == \"SKIP\") {\n      msg.transformer.metaData.validationResult[\"tyfwvblhg64\"] = {\n        \"skip-validation\": {\n          error: false,\n          message: \"User Skipped the message\"\n        }\n      }\n      return JSON.stringify(msg);\n    }\n    msg.transformer.metaData.currentInput[\"tyfwvblhg64\"].text = msg.payload.text;\n  \n    msg.transformer.metaData.prompt = `\n    Given a user response and a question description, your task is to evaluate whether the user’s response correctly addresses the question. If the response is correct, confirm it. If the response is incorrect or incomplete, identify the issue, explain why the response is not sufficient, and provide guidance on how the user can improve their answer. If the user raises concerns or asks questions, address them while reiterating the original question to ensure clarity.\n\nYou are to always return the response in the form of JSON with three keys: “error”, “message”, and “response”.\n\n\t•\t“error” is a boolean key that should be true if the answer is not relevant to the question, and false if the answer is relevant or has been validated.\n\t•\t“message” should contain the reiterated response, including any necessary explanations or guidance.\n\t•\t“response” should extract and contain the useful information from the user’s response that directly answers the question. For example, if the question asks for a name and the user responds with “My name is John Doe,” the “response” key should have the value “John Doe”.\n\nEnsure that the response you send back is parseable by JSON.parse() in NodeJS. Only return stringified JSON, not markdown.\nHave a friendly and professional tone.\nInput:\n\t1.\tUser Response: ${msg.payload.text}\n\t2.\tQuestion Description: Write your name\n\nOutput:\n\t•\tExample: {“error”: false, “message”: “Thanks for your response.”, “response”: “John Doe”}\n\t•\tExample: {“error”: true, “message”: “Your response is not relevant to the question.”, “response”: “”}\n    `;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_0",
      "data": {
        "id": "CODE_RUNNER_LLM_SKIP_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.payload.text == \"SKIP\") {\n      throw new Error(\"User Skipped the message\");\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_0",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_LLM_SKIP_0.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_0-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_0-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_0-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_0-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_0-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_0-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_0-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_0-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_0-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_0-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_0-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_0-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_0-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_0-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_0-input-languageProvider-string"
          },
          {
            "id": "LLM_0-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_0-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_0",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_0",
      "data": {
        "id": "CODE_RUNNER_LLM_VALIDATOR_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.validationResult[\"tyfwvblhg64\"] = {\n      llm: JSON.parse(msg.payload.text),\n    }\n    if(!msg.transformer.metaData.validationResult[\"tyfwvblhg64\"].llm.error){\n      msg.transformer.metaData.currentInput[\"tyfwvblhg64\"].text = msg.transformer.metaData.validationResult[\"tyfwvblhg64\"].llm.response;\n    }\n    return JSON.stringify(msg);\n  ",
          "xmessage": ["LLM_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_0",
      "data": {
        "id": "CODE_RUNNER_STORE_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"tyfwvblhg64\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"tyfwvblhg64\": \"\"};\n      } else {\n        formInput = {\"tyfwvblhg64\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"tyfwvblhg64\"][\"llm\"].error){\n        throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"tyfwvblhg64\"].text;\n    if(formInput){\n      formInput = {...formInput, \"tyfwvblhg64\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"tyfwvblhg64\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_LLM_VALIDATOR_0.data.instance",
            "CODE_RUNNER_LLM_SKIP_0.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_0",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"tyfwvblhg64\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"tyfwvblhg64\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"tyfwvblhg64\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"tyfwvblhg64\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"094o0w7p3pd\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_0.data.instance",
            "CODE_RUNNER_STORE_0.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_1",
      "data": {
        "id": "CODE_RUNNER_ASK_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter your email.\";\nmsg.transformer.metaData.currentQuestion=\"Enter your email.\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter your email.`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"094o0w7p3pd\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"094o0w7p3pd\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_1",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_1.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_1-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_1-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_1-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_1-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_1-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_1-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_1",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_1",
      "data": {
        "id": "USER_FEEDBACK_LOOP_1",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_1.data.instance",
            "CODE_RUNNER_VALIDATION_1.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_1-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_1",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"094o0w7p3pd\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"094o0w7p3pd\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"094o0w7p3pd\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"094o0w7p3pd\"].text = msg.payload.text;\n  \n    const inputText = msg.transformer.metaData.currentInput[\"094o0w7p3pd\"].text;\n\n    let res;\n    const validationResult = msg.transformer.metaData.validationResult[\"094o0w7p3pd\"] || {};\n    \n        res = validator[\"email\"](inputText)\n        validationResult[\"email\"] = res;\n\n      msg.transformer.metaData.validationResult[\"094o0w7p3pd\"] = validationResult;\nreturn JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_1",
      "data": {
        "id": "CODE_RUNNER_STORE_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"094o0w7p3pd\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"094o0w7p3pd\": \"\"};\n      } else {\n        formInput = {\"094o0w7p3pd\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"094o0w7p3pd\"].email.error){\n          throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"094o0w7p3pd\"].text;\n    if(formInput){\n      formInput = {...formInput, \"094o0w7p3pd\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"094o0w7p3pd\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_1",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"094o0w7p3pd\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"094o0w7p3pd\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"094o0w7p3pd\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"094o0w7p3pd\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_2",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"ogk0sxxy1kl\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_1.data.instance",
            "CODE_RUNNER_STORE_1.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_2",
      "data": {
        "id": "CODE_RUNNER_ASK_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Write your Phone Number\";\nmsg.transformer.metaData.currentQuestion=\"Write your Phone Number\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Write your Phone Number`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"ogk0sxxy1kl\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"ogk0sxxy1kl\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_2.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_2",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_2.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_2-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_2-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_2-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_2-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_2-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_2-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_2-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_2",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_2",
      "data": {
        "id": "USER_FEEDBACK_LOOP_2",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_2.data.instance",
            "CODE_RUNNER_VALIDATION_2.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_2-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_2",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"ogk0sxxy1kl\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"ogk0sxxy1kl\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"ogk0sxxy1kl\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"ogk0sxxy1kl\"].text = msg.payload.text;\n  \n    const inputText = msg.transformer.metaData.currentInput[\"ogk0sxxy1kl\"].text;\n\n    let res;\n    const validationResult = msg.transformer.metaData.validationResult[\"ogk0sxxy1kl\"] || {};\n    \n        res = validator[\"phone\"](inputText)\n        validationResult[\"phone\"] = res;\n\n      msg.transformer.metaData.validationResult[\"ogk0sxxy1kl\"] = validationResult;\nreturn JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_2.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_2",
      "data": {
        "id": "CODE_RUNNER_STORE_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"ogk0sxxy1kl\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"ogk0sxxy1kl\": \"\"};\n      } else {\n        formInput = {\"ogk0sxxy1kl\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"ogk0sxxy1kl\"].phone.error){\n          throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"ogk0sxxy1kl\"].text;\n    if(formInput){\n      formInput = {...formInput, \"ogk0sxxy1kl\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"ogk0sxxy1kl\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_2.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_2",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_2",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"ogk0sxxy1kl\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"ogk0sxxy1kl\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"ogk0sxxy1kl\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"ogk0sxxy1kl\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_2.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_2-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_2-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_2-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_2-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_2-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_3",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"mlhkqa71bp3\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_2.data.instance",
            "CODE_RUNNER_STORE_2.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_3",
      "data": {
        "id": "CODE_RUNNER_ASK_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter yoour Home Address\";\nmsg.transformer.metaData.currentQuestion=\"Enter yoour Home Address\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter yoour Home Address`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"mlhkqa71bp3\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"mlhkqa71bp3\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_3.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_3",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_3.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_3-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_3-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_3-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_3-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_3-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_3-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_3-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_3",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_3",
      "data": {
        "id": "USER_FEEDBACK_LOOP_3",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_3.data.instance",
            "CODE_RUNNER_VALIDATION_3.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_3-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_3",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"mlhkqa71bp3\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"mlhkqa71bp3\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"mlhkqa71bp3\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"mlhkqa71bp3\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_3.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_3",
      "data": {
        "id": "CODE_RUNNER_STORE_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"mlhkqa71bp3\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"mlhkqa71bp3\": \"\"};\n      } else {\n        formInput = {\"mlhkqa71bp3\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"mlhkqa71bp3\"].text;\n    if(formInput){\n      formInput = {...formInput, \"mlhkqa71bp3\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"mlhkqa71bp3\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_3.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_3",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_3",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"mlhkqa71bp3\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"mlhkqa71bp3\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"mlhkqa71bp3\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_3.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_3-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_3-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_3-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_3-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_3-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_4",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"vzbii6b37vh\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_3.data.instance",
            "CODE_RUNNER_STORE_3.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_4",
      "data": {
        "id": "CODE_RUNNER_ASK_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter Parent's Name\";\nmsg.transformer.metaData.currentQuestion=\"Enter Parent's Name\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter Parent's Name`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"vzbii6b37vh\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"vzbii6b37vh\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_4",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_4.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_4-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_4-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_4-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_4-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_4-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_4-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_4-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_4",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_4",
      "data": {
        "id": "USER_FEEDBACK_LOOP_4",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_4.data.instance",
            "CODE_RUNNER_VALIDATION_4.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_4-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4",
      "data": {
        "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"vzbii6b37vh\": {}\n      };\n    }\n  \n    if(msg.payload.text == \"SKIP\") {\n      msg.transformer.metaData.validationResult[\"vzbii6b37vh\"] = {\n        \"skip-validation\": {\n          error: false,\n          message: \"User Skipped the message\"\n        }\n      }\n      return JSON.stringify(msg);\n    }\n    msg.transformer.metaData.currentInput[\"vzbii6b37vh\"].text = msg.payload.text;\n  \n    msg.transformer.metaData.prompt = `\n    Given a user response and a question description, your task is to evaluate whether the user’s response correctly addresses the question. If the response is correct, confirm it. If the response is incorrect or incomplete, identify the issue, explain why the response is not sufficient, and provide guidance on how the user can improve their answer. If the user raises concerns or asks questions, address them while reiterating the original question to ensure clarity.\n\nYou are to always return the response in the form of JSON with three keys: “error”, “message”, and “response”.\n\n\t•\t“error” is a boolean key that should be true if the answer is not relevant to the question, and false if the answer is relevant or has been validated.\n\t•\t“message” should contain the reiterated response, including any necessary explanations or guidance.\n\t•\t“response” should extract and contain the useful information from the user’s response that directly answers the question. For example, if the question asks for a name and the user responds with “My name is John Doe,” the “response” key should have the value “John Doe”.\n\nEnsure that the response you send back is parseable by JSON.parse() in NodeJS. Only return stringified JSON, not markdown.\nHave a friendly and professional tone.\nInput:\n\t1.\tUser Response: ${msg.payload.text}\n\t2.\tQuestion Description: Enter Parent's Name\n\nOutput:\n\t•\tExample: {“error”: false, “message”: “Thanks for your response.”, “response”: “John Doe”}\n\t•\tExample: {“error”: true, “message”: “Your response is not relevant to the question.”, “response”: “”}\n    `;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_4",
      "data": {
        "id": "CODE_RUNNER_LLM_SKIP_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.payload.text == \"SKIP\") {\n      throw new Error(\"User Skipped the message\");\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_4",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_LLM_SKIP_4.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_4-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_4-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_4-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_4-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_4-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_4-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_4-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_4-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_4-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_4-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_4-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_4-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_4-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_4-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_4-input-languageProvider-string"
          },
          {
            "id": "LLM_4-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_4-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_4",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_4",
      "data": {
        "id": "CODE_RUNNER_LLM_VALIDATOR_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.validationResult[\"vzbii6b37vh\"] = {\n      llm: JSON.parse(msg.payload.text),\n    }\n    if(!msg.transformer.metaData.validationResult[\"vzbii6b37vh\"].llm.error){\n      msg.transformer.metaData.currentInput[\"vzbii6b37vh\"].text = msg.transformer.metaData.validationResult[\"vzbii6b37vh\"].llm.response;\n    }\n    return JSON.stringify(msg);\n  ",
          "xmessage": ["LLM_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_4",
      "data": {
        "id": "CODE_RUNNER_STORE_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"vzbii6b37vh\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"vzbii6b37vh\": \"\"};\n      } else {\n        formInput = {\"vzbii6b37vh\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"vzbii6b37vh\"][\"llm\"].error){\n        throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"vzbii6b37vh\"].text;\n    if(formInput){\n      formInput = {...formInput, \"vzbii6b37vh\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"vzbii6b37vh\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_LLM_VALIDATOR_4.data.instance",
            "CODE_RUNNER_LLM_SKIP_4.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_4",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_4",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"vzbii6b37vh\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"vzbii6b37vh\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"vzbii6b37vh\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"vzbii6b37vh\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_4.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_4-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_4-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_4-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_4-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_4-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_5",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"mwrabiks0tm\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_4.data.instance",
            "CODE_RUNNER_STORE_4.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_5",
      "data": {
        "id": "CODE_RUNNER_ASK_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter Parent's Email\";\nmsg.transformer.metaData.currentQuestion=\"Enter Parent's Email\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter Parent's Email`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"mwrabiks0tm\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"mwrabiks0tm\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_5.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_5",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_5.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_5-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_5-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_5-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_5-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_5-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_5-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_5-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_5",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_5",
      "data": {
        "id": "USER_FEEDBACK_LOOP_5",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_5.data.instance",
            "CODE_RUNNER_VALIDATION_5.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_5-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_5",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"mwrabiks0tm\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"mwrabiks0tm\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"mwrabiks0tm\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"mwrabiks0tm\"].text = msg.payload.text;\n  \n    const inputText = msg.transformer.metaData.currentInput[\"mwrabiks0tm\"].text;\n\n    let res;\n    const validationResult = msg.transformer.metaData.validationResult[\"mwrabiks0tm\"] || {};\n    \n        res = validator[\"email\"](inputText)\n        validationResult[\"email\"] = res;\n\n      msg.transformer.metaData.validationResult[\"mwrabiks0tm\"] = validationResult;\nreturn JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_5.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_5",
      "data": {
        "id": "CODE_RUNNER_STORE_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"mwrabiks0tm\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"mwrabiks0tm\": \"\"};\n      } else {\n        formInput = {\"mwrabiks0tm\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"mwrabiks0tm\"].email.error){\n          throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"mwrabiks0tm\"].text;\n    if(formInput){\n      formInput = {...formInput, \"mwrabiks0tm\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"mwrabiks0tm\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_5.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_5",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_5",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"mwrabiks0tm\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"mwrabiks0tm\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"mwrabiks0tm\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"mwrabiks0tm\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_5.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_5-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_5-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_5-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_5-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_5-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_6",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_6",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"t3k9wpka28i\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_5.data.instance",
            "CODE_RUNNER_STORE_5.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_6-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_6-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_6-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_6-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_6-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_6",
      "data": {
        "id": "CODE_RUNNER_ASK_6",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter Your Parent's Phone Number\";\nmsg.transformer.metaData.currentQuestion=\"Enter Your Parent's Phone Number\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter Your Parent's Phone Number`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"t3k9wpka28i\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"t3k9wpka28i\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_6.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_6-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_6-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_6-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_6-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_6-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_6",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_6.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_6-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_6-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_6-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_6-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_6-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_6-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_6-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_6-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_6",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_6",
      "data": {
        "id": "USER_FEEDBACK_LOOP_6",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_6.data.instance",
            "CODE_RUNNER_VALIDATION_6.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_6-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_6-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_6-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_6",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_6",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"t3k9wpka28i\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"t3k9wpka28i\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"t3k9wpka28i\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"t3k9wpka28i\"].text = msg.payload.text;\n  \n    const inputText = msg.transformer.metaData.currentInput[\"t3k9wpka28i\"].text;\n\n    let res;\n    const validationResult = msg.transformer.metaData.validationResult[\"t3k9wpka28i\"] || {};\n    \n        res = validator[\"phone\"](inputText)\n        validationResult[\"phone\"] = res;\n\n      msg.transformer.metaData.validationResult[\"t3k9wpka28i\"] = validationResult;\nreturn JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_6.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_6-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_6-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_6-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_6-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_6-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_6",
      "data": {
        "id": "CODE_RUNNER_STORE_6",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"t3k9wpka28i\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"t3k9wpka28i\": \"\"};\n      } else {\n        formInput = {\"t3k9wpka28i\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"t3k9wpka28i\"].phone.error){\n          throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"t3k9wpka28i\"].text;\n    if(formInput){\n      formInput = {...formInput, \"t3k9wpka28i\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"t3k9wpka28i\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_6.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_6-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_6-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_6-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_6-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_6-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_6",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_6",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"t3k9wpka28i\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"t3k9wpka28i\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"t3k9wpka28i\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"t3k9wpka28i\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_6.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_6-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_6-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_6-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_6-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_6-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_7",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_7",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"jxzdf1ihs4p\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_6.data.instance",
            "CODE_RUNNER_STORE_6.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_7-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_7-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_7-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_7-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_7-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_7",
      "data": {
        "id": "CODE_RUNNER_ASK_7",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Select Your Class\";\nmsg.transformer.metaData.currentQuestion=\"Select Your Class\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Select Your Class`;\n  msg.payload.buttonChoices ={\"header\":\"Select Your Class\",\"choices\":[{\"key\":\"Class 1\",\"text\":\"Class 1\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"Class 2\",\"text\":\"Class 2\",\"isEnabled\":true,\"showTextInput\":true}]};\n\n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"jxzdf1ihs4p\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"jxzdf1ihs4p\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_7.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_7-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_7-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_7-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_7-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_7-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_7",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_7.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_7-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_7-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_7-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_7-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_7-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_7-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_7-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_7-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_7",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_7",
      "data": {
        "id": "USER_FEEDBACK_LOOP_7",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_7.data.instance",
            "CODE_RUNNER_VALIDATION_7.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_7-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_7-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_7-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_7",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_7",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"jxzdf1ihs4p\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"jxzdf1ihs4p\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"jxzdf1ihs4p\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"jxzdf1ihs4p\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_7.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_7-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_7-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_7-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_7-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_7-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_7",
      "data": {
        "id": "CODE_RUNNER_STORE_7",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"jxzdf1ihs4p\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"jxzdf1ihs4p\": \"\"};\n      } else {\n        formInput = {\"jxzdf1ihs4p\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"jxzdf1ihs4p\"].text;\n    if(formInput){\n      formInput = {...formInput, \"jxzdf1ihs4p\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"jxzdf1ihs4p\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_7.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_7-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_7-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_7-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_7-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_7-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_7",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_7",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"jxzdf1ihs4p\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"jxzdf1ihs4p\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"jxzdf1ihs4p\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_7.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_7-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_7-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_7-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_7-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_7-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_8",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_8",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(formInput[\"jxzdf1ihs4p\"] == \"Class 1\")) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"rulw9m23ned\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_7.data.instance",
            "CODE_RUNNER_STORE_7.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_8-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_8-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_8-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_8-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_8-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_8",
      "data": {
        "id": "CODE_RUNNER_ASK_8",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"What is your favorite subject (class 1)\";\nmsg.transformer.metaData.currentQuestion=\"What is your favorite subject (class 1)\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is What is your favorite subject (class 1)`;\n  msg.payload.buttonChoices ={\"header\":\"What is your favorite subject (class 1)\",\"choices\":[{\"key\":\"English\",\"text\":\"English\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"Maths\",\"text\":\"Maths\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"Social\",\"text\":\"Social\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"Science\",\"text\":\"Science\",\"isEnabled\":true,\"showTextInput\":true}]};\n\n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"rulw9m23ned\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"rulw9m23ned\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_8.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_8-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_8-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_8-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_8-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_8-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_8",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_8.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_8-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_8-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_8-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_8-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_8-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_8-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_8-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_8-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_8",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_8",
      "data": {
        "id": "USER_FEEDBACK_LOOP_8",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_8.data.instance",
            "CODE_RUNNER_VALIDATION_8.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_8-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_8-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_8-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_8",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_8",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"rulw9m23ned\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"rulw9m23ned\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"rulw9m23ned\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"rulw9m23ned\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_8.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_8-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_8-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_8-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_8-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_8-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_8",
      "data": {
        "id": "CODE_RUNNER_STORE_8",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"rulw9m23ned\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"rulw9m23ned\": \"\"};\n      } else {\n        formInput = {\"rulw9m23ned\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"rulw9m23ned\"].text;\n    if(formInput){\n      formInput = {...formInput, \"rulw9m23ned\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"rulw9m23ned\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_8.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_8-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_8-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_8-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_8-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_8-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_8",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_8",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"rulw9m23ned\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"rulw9m23ned\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"rulw9m23ned\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_8.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_8-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_8-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_8-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_8-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_8-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_9",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_9",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(formInput[\"jxzdf1ihs4p\"] == \"Class 2\")) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"9wfb5xd3m6i\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_8.data.instance",
            "CODE_RUNNER_STORE_8.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_9-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_9-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_9-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_9-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_9-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_9",
      "data": {
        "id": "CODE_RUNNER_ASK_9",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"What is your favorite activity? (class 2)\";\nmsg.transformer.metaData.currentQuestion=\"What is your favorite activity? (class 2)\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is What is your favorite activity? (class 2)`;\n  msg.payload.buttonChoices ={\"header\":\"What is your favorite activity? (class 2)\",\"choices\":[{\"key\":\"Sport\",\"text\":\"Sport\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"Music\",\"text\":\"Music\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"Art\",\"text\":\"Art\",\"isEnabled\":true,\"showTextInput\":true}]};\n\n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"9wfb5xd3m6i\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"9wfb5xd3m6i\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_9.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_9-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_9-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_9-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_9-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_9-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_9",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_9.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_9-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_9-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_9-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_9-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_9-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_9-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_9-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_9-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_9",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_9",
      "data": {
        "id": "USER_FEEDBACK_LOOP_9",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_9.data.instance",
            "CODE_RUNNER_VALIDATION_9.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_9-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_9-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_9-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_9",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_9",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"9wfb5xd3m6i\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"9wfb5xd3m6i\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"9wfb5xd3m6i\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"9wfb5xd3m6i\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_9.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_9-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_9-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_9-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_9-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_9-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_9",
      "data": {
        "id": "CODE_RUNNER_STORE_9",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"9wfb5xd3m6i\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"9wfb5xd3m6i\": \"\"};\n      } else {\n        formInput = {\"9wfb5xd3m6i\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"9wfb5xd3m6i\"].text;\n    if(formInput){\n      formInput = {...formInput, \"9wfb5xd3m6i\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"9wfb5xd3m6i\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_9.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_9-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_9-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_9-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_9-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_9-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_9",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_9",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"9wfb5xd3m6i\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"9wfb5xd3m6i\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"9wfb5xd3m6i\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_9.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_9-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_9-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_9-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_9-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_9-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_10",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_10",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(formInput[\"9wfb5xd3m6i\"] == \"Sport\")) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"btrnfe31aog\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_9.data.instance",
            "CODE_RUNNER_STORE_9.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_10-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_10-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_10-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_10-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_10",
      "data": {
        "id": "CODE_RUNNER_ASK_10",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Any Achievements in Sports (class 2)\";\nmsg.transformer.metaData.currentQuestion=\"Any Achievements in Sports (class 2)\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Any Achievements in Sports (class 2)`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"btrnfe31aog\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"btrnfe31aog\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_10.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_10-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_10-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_10-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_10-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_10",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_10.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_10-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_10-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_10-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_10-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_10-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_10-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_10-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_10",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_10",
      "data": {
        "id": "USER_FEEDBACK_LOOP_10",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_10.data.instance",
            "CODE_RUNNER_VALIDATION_10.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_10-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_10-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_10-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10",
      "data": {
        "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"btrnfe31aog\": {}\n      };\n    }\n  \n    if(msg.payload.text == \"SKIP\") {\n      msg.transformer.metaData.validationResult[\"btrnfe31aog\"] = {\n        \"skip-validation\": {\n          error: false,\n          message: \"User Skipped the message\"\n        }\n      }\n      return JSON.stringify(msg);\n    }\n    msg.transformer.metaData.currentInput[\"btrnfe31aog\"].text = msg.payload.text;\n  \n    msg.transformer.metaData.prompt = `\n    Given a user response and a question description, your task is to evaluate whether the user’s response correctly addresses the question. If the response is correct, confirm it. If the response is incorrect or incomplete, identify the issue, explain why the response is not sufficient, and provide guidance on how the user can improve their answer. If the user raises concerns or asks questions, address them while reiterating the original question to ensure clarity.\n\nYou are to always return the response in the form of JSON with three keys: “error”, “message”, and “response”.\n\n\t•\t“error” is a boolean key that should be true if the answer is not relevant to the question, and false if the answer is relevant or has been validated.\n\t•\t“message” should contain the reiterated response, including any necessary explanations or guidance.\n\t•\t“response” should extract and contain the useful information from the user’s response that directly answers the question. For example, if the question asks for a name and the user responds with “My name is John Doe,” the “response” key should have the value “John Doe”.\n\nEnsure that the response you send back is parseable by JSON.parse() in NodeJS. Only return stringified JSON, not markdown.\nHave a friendly and professional tone.\nInput:\n\t1.\tUser Response: ${msg.payload.text}\n\t2.\tQuestion Description: Any Achievements in Sports (class 2)\n\nOutput:\n\t•\tExample: {“error”: false, “message”: “Thanks for your response.”, “response”: “John Doe”}\n\t•\tExample: {“error”: true, “message”: “Your response is not relevant to the question.”, “response”: “”}\n    `;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_10.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_10",
      "data": {
        "id": "CODE_RUNNER_LLM_SKIP_10",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.payload.text == \"SKIP\") {\n      throw new Error(\"User Skipped the message\");\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_10-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_10-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_10-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_10-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_10",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_LLM_SKIP_10.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_10-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_10-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_10-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_10-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_10-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_10-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_10-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_10-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_10-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_10-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_10-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_10-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_10-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_10-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_10-input-languageProvider-string"
          },
          {
            "id": "LLM_10-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_10-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_10",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_10",
      "data": {
        "id": "CODE_RUNNER_LLM_VALIDATOR_10",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.validationResult[\"btrnfe31aog\"] = {\n      llm: JSON.parse(msg.payload.text),\n    }\n    if(!msg.transformer.metaData.validationResult[\"btrnfe31aog\"].llm.error){\n      msg.transformer.metaData.currentInput[\"btrnfe31aog\"].text = msg.transformer.metaData.validationResult[\"btrnfe31aog\"].llm.response;\n    }\n    return JSON.stringify(msg);\n  ",
          "xmessage": ["LLM_10.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_10-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_10-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_10-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_10-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_10",
      "data": {
        "id": "CODE_RUNNER_STORE_10",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"btrnfe31aog\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"btrnfe31aog\": \"\"};\n      } else {\n        formInput = {\"btrnfe31aog\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"btrnfe31aog\"][\"llm\"].error){\n        throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"btrnfe31aog\"].text;\n    if(formInput){\n      formInput = {...formInput, \"btrnfe31aog\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"btrnfe31aog\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_LLM_VALIDATOR_10.data.instance",
            "CODE_RUNNER_LLM_SKIP_10.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_10-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_10-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_10-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_10-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_10",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_10",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"btrnfe31aog\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"btrnfe31aog\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"btrnfe31aog\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"btrnfe31aog\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_10.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_10-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_10-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_10-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_10-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_10-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_11",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_11",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(formInput[\"jxzdf1ihs4p\"] == \"Class 2\")) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"1n4whm35c3d\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_10.data.instance",
            "CODE_RUNNER_STORE_10.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_11-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_11-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_11-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_11-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_11-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_11",
      "data": {
        "id": "CODE_RUNNER_ASK_11",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter your class 1 Marks. (Rounded to the nearest whole number)\";\nmsg.transformer.metaData.currentQuestion=\"Enter your class 1 Marks. (Rounded to the nearest whole number)\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter your class 1 Marks. (Rounded to the nearest whole number)`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"1n4whm35c3d\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"1n4whm35c3d\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_11.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_11-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_11-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_11-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_11-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_11-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_11",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_11.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_11-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_11-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_11-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_11-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_11-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_11-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_11-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_11-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_11",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_11",
      "data": {
        "id": "USER_FEEDBACK_LOOP_11",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_11.data.instance",
            "CODE_RUNNER_VALIDATION_11.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_11-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_11-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_11-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_11",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_11",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"1n4whm35c3d\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"1n4whm35c3d\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"1n4whm35c3d\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"1n4whm35c3d\"].text = msg.payload.text;\n  \n    const inputText = msg.transformer.metaData.currentInput[\"1n4whm35c3d\"].text;\n\n    let res;\n    const validationResult = msg.transformer.metaData.validationResult[\"1n4whm35c3d\"] || {};\n    \n        res = validator[\"number\"](inputText)\n        validationResult[\"number\"] = res;\n\n      msg.transformer.metaData.validationResult[\"1n4whm35c3d\"] = validationResult;\nreturn JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_11.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_11-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_11-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_11-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_11-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_11-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_11",
      "data": {
        "id": "CODE_RUNNER_STORE_11",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"1n4whm35c3d\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"1n4whm35c3d\": \"\"};\n      } else {\n        formInput = {\"1n4whm35c3d\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"1n4whm35c3d\"].number.error){\n          throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"1n4whm35c3d\"].text;\n    if(formInput){\n      formInput = {...formInput, \"1n4whm35c3d\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"1n4whm35c3d\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_11.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_11-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_11-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_11-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_11-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_11-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_11",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_11",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"1n4whm35c3d\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"1n4whm35c3d\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"1n4whm35c3d\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"1n4whm35c3d\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_11.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_11-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_11-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_11-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_11-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_11-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_12",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_12",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"99n7g2s7is2\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_11.data.instance",
            "CODE_RUNNER_STORE_11.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_12-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_12-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_12-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_12-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_12",
      "data": {
        "id": "CODE_RUNNER_ASK_12",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter your previous school name (class 1)\";\nmsg.transformer.metaData.currentQuestion=\"Enter your previous school name (class 1)\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter your previous school name (class 1)`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"99n7g2s7is2\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"99n7g2s7is2\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_12.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_12-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_12-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_12-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_12-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_12",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_12.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_12-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_12-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_12-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_12-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_12-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_12-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_12-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_12",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_12",
      "data": {
        "id": "USER_FEEDBACK_LOOP_12",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_12.data.instance",
            "CODE_RUNNER_VALIDATION_12.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_12-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_12-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_12-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12",
      "data": {
        "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"99n7g2s7is2\": {}\n      };\n    }\n  \n    if(msg.payload.text == \"SKIP\") {\n      msg.transformer.metaData.validationResult[\"99n7g2s7is2\"] = {\n        \"skip-validation\": {\n          error: false,\n          message: \"User Skipped the message\"\n        }\n      }\n      return JSON.stringify(msg);\n    }\n    msg.transformer.metaData.currentInput[\"99n7g2s7is2\"].text = msg.payload.text;\n  \n    msg.transformer.metaData.prompt = `\n    Given a user response and a question description, your task is to evaluate whether the user’s response correctly addresses the question. If the response is correct, confirm it. If the response is incorrect or incomplete, identify the issue, explain why the response is not sufficient, and provide guidance on how the user can improve their answer. If the user raises concerns or asks questions, address them while reiterating the original question to ensure clarity.\n\nYou are to always return the response in the form of JSON with three keys: “error”, “message”, and “response”.\n\n\t•\t“error” is a boolean key that should be true if the answer is not relevant to the question, and false if the answer is relevant or has been validated.\n\t•\t“message” should contain the reiterated response, including any necessary explanations or guidance.\n\t•\t“response” should extract and contain the useful information from the user’s response that directly answers the question. For example, if the question asks for a name and the user responds with “My name is John Doe,” the “response” key should have the value “John Doe”.\n\nEnsure that the response you send back is parseable by JSON.parse() in NodeJS. Only return stringified JSON, not markdown.\nHave a friendly and professional tone.\nInput:\n\t1.\tUser Response: ${msg.payload.text}\n\t2.\tQuestion Description: Enter your previous school name (class 1)\n\nOutput:\n\t•\tExample: {“error”: false, “message”: “Thanks for your response.”, “response”: “John Doe”}\n\t•\tExample: {“error”: true, “message”: “Your response is not relevant to the question.”, “response”: “”}\n    `;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_12.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_12",
      "data": {
        "id": "CODE_RUNNER_LLM_SKIP_12",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.payload.text == \"SKIP\") {\n      throw new Error(\"User Skipped the message\");\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_12-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_12-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_12-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_12-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_12",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_LLM_SKIP_12.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_12-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_12-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_12-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_12-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_12-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_12-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_12-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_12-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_12-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_12-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_12-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_12-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_12-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_12-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_12-input-languageProvider-string"
          },
          {
            "id": "LLM_12-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_12-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_12",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_12",
      "data": {
        "id": "CODE_RUNNER_LLM_VALIDATOR_12",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.validationResult[\"99n7g2s7is2\"] = {\n      llm: JSON.parse(msg.payload.text),\n    }\n    if(!msg.transformer.metaData.validationResult[\"99n7g2s7is2\"].llm.error){\n      msg.transformer.metaData.currentInput[\"99n7g2s7is2\"].text = msg.transformer.metaData.validationResult[\"99n7g2s7is2\"].llm.response;\n    }\n    return JSON.stringify(msg);\n  ",
          "xmessage": ["LLM_12.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_12-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_12-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_12-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_12-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_12",
      "data": {
        "id": "CODE_RUNNER_STORE_12",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"99n7g2s7is2\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"99n7g2s7is2\": \"\"};\n      } else {\n        formInput = {\"99n7g2s7is2\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"99n7g2s7is2\"][\"llm\"].error){\n        throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"99n7g2s7is2\"].text;\n    if(formInput){\n      formInput = {...formInput, \"99n7g2s7is2\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"99n7g2s7is2\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_LLM_VALIDATOR_12.data.instance",
            "CODE_RUNNER_LLM_SKIP_12.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_12-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_12-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_12-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_12-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_12",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_12",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"99n7g2s7is2\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"99n7g2s7is2\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"99n7g2s7is2\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"99n7g2s7is2\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_12.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_12-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_12-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_12-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_12-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_12-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_13",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_13",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"kbdw2sgdy4j\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_12.data.instance",
            "CODE_RUNNER_STORE_12.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_13-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_13-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_13-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_13-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_13",
      "data": {
        "id": "CODE_RUNNER_ASK_13",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Any Allergy or Medical conditions?\";\nmsg.transformer.metaData.currentQuestion=\"Any Allergy or Medical conditions?\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Any Allergy or Medical conditions?`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"kbdw2sgdy4j\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"kbdw2sgdy4j\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_13.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_13-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_13-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_13-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_13-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_13",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_13.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_13-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_13-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_13-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_13-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_13-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_13-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_13-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_13",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_13",
      "data": {
        "id": "USER_FEEDBACK_LOOP_13",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_13.data.instance",
            "CODE_RUNNER_VALIDATION_13.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_13-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_13-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_13-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13",
      "data": {
        "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"kbdw2sgdy4j\": {}\n      };\n    }\n  \n    if(msg.payload.text == \"SKIP\") {\n      msg.transformer.metaData.validationResult[\"kbdw2sgdy4j\"] = {\n        \"skip-validation\": {\n          error: false,\n          message: \"User Skipped the message\"\n        }\n      }\n      return JSON.stringify(msg);\n    }\n    msg.transformer.metaData.currentInput[\"kbdw2sgdy4j\"].text = msg.payload.text;\n  \n    msg.transformer.metaData.prompt = `\n    Given a user response and a question description, your task is to evaluate whether the user’s response correctly addresses the question. If the response is correct, confirm it. If the response is incorrect or incomplete, identify the issue, explain why the response is not sufficient, and provide guidance on how the user can improve their answer. If the user raises concerns or asks questions, address them while reiterating the original question to ensure clarity.\n\nYou are to always return the response in the form of JSON with three keys: “error”, “message”, and “response”.\n\n\t•\t“error” is a boolean key that should be true if the answer is not relevant to the question, and false if the answer is relevant or has been validated.\n\t•\t“message” should contain the reiterated response, including any necessary explanations or guidance.\n\t•\t“response” should extract and contain the useful information from the user’s response that directly answers the question. For example, if the question asks for a name and the user responds with “My name is John Doe,” the “response” key should have the value “John Doe”.\n\nEnsure that the response you send back is parseable by JSON.parse() in NodeJS. Only return stringified JSON, not markdown.\nHave a friendly and professional tone.\nInput:\n\t1.\tUser Response: ${msg.payload.text}\n\t2.\tQuestion Description: Any Allergy or Medical conditions?\n\nOutput:\n\t•\tExample: {“error”: false, “message”: “Thanks for your response.”, “response”: “John Doe”}\n\t•\tExample: {“error”: true, “message”: “Your response is not relevant to the question.”, “response”: “”}\n    `;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_13.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_13",
      "data": {
        "id": "CODE_RUNNER_LLM_SKIP_13",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.payload.text == \"SKIP\") {\n      throw new Error(\"User Skipped the message\");\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_13-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_13-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_13-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_13-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_13",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_LLM_SKIP_13.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_13-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_13-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_13-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_13-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_13-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_13-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_13-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_13-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_13-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_13-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_13-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_13-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_13-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_13-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_13-input-languageProvider-string"
          },
          {
            "id": "LLM_13-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_13-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_13",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_13",
      "data": {
        "id": "CODE_RUNNER_LLM_VALIDATOR_13",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.validationResult[\"kbdw2sgdy4j\"] = {\n      llm: JSON.parse(msg.payload.text),\n    }\n    if(!msg.transformer.metaData.validationResult[\"kbdw2sgdy4j\"].llm.error){\n      msg.transformer.metaData.currentInput[\"kbdw2sgdy4j\"].text = msg.transformer.metaData.validationResult[\"kbdw2sgdy4j\"].llm.response;\n    }\n    return JSON.stringify(msg);\n  ",
          "xmessage": ["LLM_13.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_13-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_13-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_13-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_13-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_13",
      "data": {
        "id": "CODE_RUNNER_STORE_13",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"kbdw2sgdy4j\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"kbdw2sgdy4j\": \"\"};\n      } else {\n        formInput = {\"kbdw2sgdy4j\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"kbdw2sgdy4j\"][\"llm\"].error){\n        throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"kbdw2sgdy4j\"].text;\n    if(formInput){\n      formInput = {...formInput, \"kbdw2sgdy4j\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"kbdw2sgdy4j\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_LLM_VALIDATOR_13.data.instance",
            "CODE_RUNNER_LLM_SKIP_13.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_13-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_13-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_13-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_13-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_13",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_13",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"kbdw2sgdy4j\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"kbdw2sgdy4j\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"kbdw2sgdy4j\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"kbdw2sgdy4j\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_13.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_13-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_13-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_13-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_13-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_13-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_14",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_14",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"l407kfbj63m\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_13.data.instance",
            "CODE_RUNNER_STORE_13.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_14-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_14-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_14-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_14-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_14",
      "data": {
        "id": "CODE_RUNNER_ASK_14",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter person's name whom to contact in case of emergency\";\nmsg.transformer.metaData.currentQuestion=\"Enter person's name whom to contact in case of emergency\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter person's name whom to contact in case of emergency`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"l407kfbj63m\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"l407kfbj63m\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_14.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_14-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_14-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_14-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_14-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_14",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_14.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_14-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_14-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_14-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_14-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_14-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_14-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_14-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_14",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_14",
      "data": {
        "id": "USER_FEEDBACK_LOOP_14",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_14.data.instance",
            "CODE_RUNNER_VALIDATION_14.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_14-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_14-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_14-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14",
      "data": {
        "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"l407kfbj63m\": {}\n      };\n    }\n  \n    if(msg.payload.text == \"SKIP\") {\n      msg.transformer.metaData.validationResult[\"l407kfbj63m\"] = {\n        \"skip-validation\": {\n          error: false,\n          message: \"User Skipped the message\"\n        }\n      }\n      return JSON.stringify(msg);\n    }\n    msg.transformer.metaData.currentInput[\"l407kfbj63m\"].text = msg.payload.text;\n  \n    msg.transformer.metaData.prompt = `\n    Given a user response and a question description, your task is to evaluate whether the user’s response correctly addresses the question. If the response is correct, confirm it. If the response is incorrect or incomplete, identify the issue, explain why the response is not sufficient, and provide guidance on how the user can improve their answer. If the user raises concerns or asks questions, address them while reiterating the original question to ensure clarity.\n\nYou are to always return the response in the form of JSON with three keys: “error”, “message”, and “response”.\n\n\t•\t“error” is a boolean key that should be true if the answer is not relevant to the question, and false if the answer is relevant or has been validated.\n\t•\t“message” should contain the reiterated response, including any necessary explanations or guidance.\n\t•\t“response” should extract and contain the useful information from the user’s response that directly answers the question. For example, if the question asks for a name and the user responds with “My name is John Doe,” the “response” key should have the value “John Doe”.\n\nEnsure that the response you send back is parseable by JSON.parse() in NodeJS. Only return stringified JSON, not markdown.\nHave a friendly and professional tone.\nInput:\n\t1.\tUser Response: ${msg.payload.text}\n\t2.\tQuestion Description: Enter person's name whom to contact in case of emergency\n\nOutput:\n\t•\tExample: {“error”: false, “message”: “Thanks for your response.”, “response”: “John Doe”}\n\t•\tExample: {“error”: true, “message”: “Your response is not relevant to the question.”, “response”: “”}\n    `;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_14.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_14",
      "data": {
        "id": "CODE_RUNNER_LLM_SKIP_14",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.payload.text == \"SKIP\") {\n      throw new Error(\"User Skipped the message\");\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_14-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_14-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_14-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_SKIP_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_SKIP_14-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_14",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_LLM_SKIP_14.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_14-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_14-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_14-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_14-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_14-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_14-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_14-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_14-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_14-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_14-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_14-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_14-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_14-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_14-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_14-input-languageProvider-string"
          },
          {
            "id": "LLM_14-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_14-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_14",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_14",
      "data": {
        "id": "CODE_RUNNER_LLM_VALIDATOR_14",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.validationResult[\"l407kfbj63m\"] = {\n      llm: JSON.parse(msg.payload.text),\n    }\n    if(!msg.transformer.metaData.validationResult[\"l407kfbj63m\"].llm.error){\n      msg.transformer.metaData.currentInput[\"l407kfbj63m\"].text = msg.transformer.metaData.validationResult[\"l407kfbj63m\"].llm.response;\n    }\n    return JSON.stringify(msg);\n  ",
          "xmessage": ["LLM_14.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_14-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_14-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_14-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_LLM_VALIDATOR_14-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_14",
      "data": {
        "id": "CODE_RUNNER_STORE_14",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"l407kfbj63m\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"l407kfbj63m\": \"\"};\n      } else {\n        formInput = {\"l407kfbj63m\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"l407kfbj63m\"][\"llm\"].error){\n        throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"l407kfbj63m\"].text;\n    if(formInput){\n      formInput = {...formInput, \"l407kfbj63m\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"l407kfbj63m\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_LLM_VALIDATOR_14.data.instance",
            "CODE_RUNNER_LLM_SKIP_14.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_14-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_14-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_14-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_14-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_14",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_14",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"l407kfbj63m\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"l407kfbj63m\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"l407kfbj63m\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"l407kfbj63m\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_14.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_14-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_14-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_14-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_14-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_14-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_15",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_15",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"5ydzby9oid8\" : true};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_14.data.instance",
            "CODE_RUNNER_STORE_14.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_15-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_15-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_15-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_15-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_15-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_15",
      "data": {
        "id": "CODE_RUNNER_ASK_15",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Enter any contact number where we can contact in case of emergency\";\nmsg.transformer.metaData.currentQuestion=\"Enter any contact number where we can contact in case of emergency\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Enter any contact number where we can contact in case of emergency`;\n  \n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"5ydzby9oid8\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"5ydzby9oid8\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_15.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_15-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_15-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_15-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_15-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_15-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_15",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_15.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_15-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_15-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_15-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_15-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_15-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_15-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_15-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_15-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_15",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_15",
      "data": {
        "id": "USER_FEEDBACK_LOOP_15",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_15.data.instance",
            "CODE_RUNNER_VALIDATION_15.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_15-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_15-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_15-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_15",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_15",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"5ydzby9oid8\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"5ydzby9oid8\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"5ydzby9oid8\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"5ydzby9oid8\"].text = msg.payload.text;\n  \n    const inputText = msg.transformer.metaData.currentInput[\"5ydzby9oid8\"].text;\n\n    let res;\n    const validationResult = msg.transformer.metaData.validationResult[\"5ydzby9oid8\"] || {};\n    \n        res = validator[\"phone\"](inputText)\n        validationResult[\"phone\"] = res;\n\n      msg.transformer.metaData.validationResult[\"5ydzby9oid8\"] = validationResult;\nreturn JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_15.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_15-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_15-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_15-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_15-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_15-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_15",
      "data": {
        "id": "CODE_RUNNER_STORE_15",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"5ydzby9oid8\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"5ydzby9oid8\": \"\"};\n      } else {\n        formInput = {\"5ydzby9oid8\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n      if(msg.transformer.metaData.validationResult[\"5ydzby9oid8\"].phone.error){\n          throw new Error(\"Required Field\");\n      }\n    \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"5ydzby9oid8\"].text;\n    if(formInput){\n      formInput = {...formInput, \"5ydzby9oid8\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"5ydzby9oid8\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_15.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_15-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_15-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_15-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_15-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_15-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_15",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_15",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"5ydzby9oid8\"].retries += 1; \n  \n      const validationMsgs = [];\n        const validations = msg.transformer.metaData.validationResult;\n        if(validations){\n          const validationResult = msg.transformer.metaData.validationResult[\"5ydzby9oid8\"];\n          if(validationResult){\n            const validationTypes = Object.keys(validationResult);\n            validationTypes.forEach((validationType) => {\n              if(validationResult[validationType].error){\n                validationMsgs.push(validationResult[validationType].message);\n              }\n            });\n            const validationString = validationMsgs.join(\" \");\n            msg.payload.text = validationString;\n          }\n        }\n    \n    if(msg.transformer.metaData.currentInput[\"5ydzby9oid8\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"5ydzby9oid8\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_15.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_15-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_15-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_15-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_15-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_15-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    }
  ],
  "edges": [
    {
      "id": "CODE_RUNNER_isVISIBLE_0-CODE_RUNNER_ASK_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_0",
      "target": "CODE_RUNNER_ASK_0",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_0-LLM_LLM_ASK_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_0",
      "target": "LLM_LLM_ASK_0",
      "sourceHandle": "CODE_RUNNER_ASK_0-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_0-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_0-USER_FEEDBACK_LOOP_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_0",
      "target": "USER_FEEDBACK_LOOP_0",
      "sourceHandle": "LLM_LLM_ASK_0-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_0-CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_0",
      "target": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
      "sourceHandle": "USER_FEEDBACK_LOOP_0-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-CODE_RUNNER_LLM_SKIP_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0",
      "target": "CODE_RUNNER_LLM_SKIP_0",
      "sourceHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_SKIP_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_0-LLM_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_0",
      "target": "LLM_0",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_0-output-onSuccess-xMessage",
      "targetHandle": "LLM_0-input-xmessage-xMessage"
    },
    {
      "id": "LLM_0-CODE_RUNNER_LLM_VALIDATOR_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_0",
      "target": "CODE_RUNNER_LLM_VALIDATOR_0",
      "sourceHandle": "LLM_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_VALIDATOR_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_0-CODE_RUNNER_STORE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_VALIDATOR_0",
      "target": "CODE_RUNNER_STORE_0",
      "sourceHandle": "CODE_RUNNER_LLM_VALIDATOR_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_0-CODE_RUNNER_STORE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_0",
      "target": "CODE_RUNNER_STORE_0",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_0-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_0-CODE_RUNNER_VALIDATION_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_0",
      "target": "CODE_RUNNER_VALIDATION_0",
      "sourceHandle": "CODE_RUNNER_STORE_0-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_0-USER_FEEDBACK_LOOP_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_0",
      "target": "USER_FEEDBACK_LOOP_0",
      "sourceHandle": "CODE_RUNNER_VALIDATION_0-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1-CODE_RUNNER_ASK_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_1",
      "target": "CODE_RUNNER_ASK_1",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_1-LLM_LLM_ASK_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_1",
      "target": "LLM_LLM_ASK_1",
      "sourceHandle": "CODE_RUNNER_ASK_1-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_1-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_1-USER_FEEDBACK_LOOP_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_1",
      "target": "USER_FEEDBACK_LOOP_1",
      "sourceHandle": "LLM_LLM_ASK_1-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_1-CODE_RUNNER_RUN_VALIDATOR_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_1",
      "target": "CODE_RUNNER_RUN_VALIDATOR_1",
      "sourceHandle": "USER_FEEDBACK_LOOP_1-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_1-CODE_RUNNER_STORE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_1",
      "target": "CODE_RUNNER_STORE_1",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_1-CODE_RUNNER_VALIDATION_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_1",
      "target": "CODE_RUNNER_VALIDATION_1",
      "sourceHandle": "CODE_RUNNER_STORE_1-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_1-USER_FEEDBACK_LOOP_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_1",
      "target": "USER_FEEDBACK_LOOP_1",
      "sourceHandle": "CODE_RUNNER_VALIDATION_1-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_2-CODE_RUNNER_ASK_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_2",
      "target": "CODE_RUNNER_ASK_2",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_2-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_2-LLM_LLM_ASK_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_2",
      "target": "LLM_LLM_ASK_2",
      "sourceHandle": "CODE_RUNNER_ASK_2-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_2-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_2-USER_FEEDBACK_LOOP_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_2",
      "target": "USER_FEEDBACK_LOOP_2",
      "sourceHandle": "LLM_LLM_ASK_2-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_2-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_2-CODE_RUNNER_RUN_VALIDATOR_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_2",
      "target": "CODE_RUNNER_RUN_VALIDATOR_2",
      "sourceHandle": "USER_FEEDBACK_LOOP_2-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_2-CODE_RUNNER_STORE_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_2",
      "target": "CODE_RUNNER_STORE_2",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_2-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_2-CODE_RUNNER_VALIDATION_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_2",
      "target": "CODE_RUNNER_VALIDATION_2",
      "sourceHandle": "CODE_RUNNER_STORE_2-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_2-USER_FEEDBACK_LOOP_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_2",
      "target": "USER_FEEDBACK_LOOP_2",
      "sourceHandle": "CODE_RUNNER_VALIDATION_2-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_3-CODE_RUNNER_ASK_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_3",
      "target": "CODE_RUNNER_ASK_3",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_3-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_3-LLM_LLM_ASK_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_3",
      "target": "LLM_LLM_ASK_3",
      "sourceHandle": "CODE_RUNNER_ASK_3-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_3-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_3-USER_FEEDBACK_LOOP_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_3",
      "target": "USER_FEEDBACK_LOOP_3",
      "sourceHandle": "LLM_LLM_ASK_3-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_3-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_3-CODE_RUNNER_RUN_VALIDATOR_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_3",
      "target": "CODE_RUNNER_RUN_VALIDATOR_3",
      "sourceHandle": "USER_FEEDBACK_LOOP_3-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_3-CODE_RUNNER_STORE_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_3",
      "target": "CODE_RUNNER_STORE_3",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_3-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_3-CODE_RUNNER_VALIDATION_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_3",
      "target": "CODE_RUNNER_VALIDATION_3",
      "sourceHandle": "CODE_RUNNER_STORE_3-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_3-USER_FEEDBACK_LOOP_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_3",
      "target": "USER_FEEDBACK_LOOP_3",
      "sourceHandle": "CODE_RUNNER_VALIDATION_3-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_4-CODE_RUNNER_ASK_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_4",
      "target": "CODE_RUNNER_ASK_4",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_4-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_4-LLM_LLM_ASK_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_4",
      "target": "LLM_LLM_ASK_4",
      "sourceHandle": "CODE_RUNNER_ASK_4-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_4-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_4-USER_FEEDBACK_LOOP_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_4",
      "target": "USER_FEEDBACK_LOOP_4",
      "sourceHandle": "LLM_LLM_ASK_4-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_4-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_4-CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_4",
      "target": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4",
      "sourceHandle": "USER_FEEDBACK_LOOP_4-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4-CODE_RUNNER_LLM_SKIP_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4",
      "target": "CODE_RUNNER_LLM_SKIP_4",
      "sourceHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_4-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_SKIP_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_4-LLM_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_4",
      "target": "LLM_4",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_4-output-onSuccess-xMessage",
      "targetHandle": "LLM_4-input-xmessage-xMessage"
    },
    {
      "id": "LLM_4-CODE_RUNNER_LLM_VALIDATOR_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_4",
      "target": "CODE_RUNNER_LLM_VALIDATOR_4",
      "sourceHandle": "LLM_4-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_VALIDATOR_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_4-CODE_RUNNER_STORE_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_VALIDATOR_4",
      "target": "CODE_RUNNER_STORE_4",
      "sourceHandle": "CODE_RUNNER_LLM_VALIDATOR_4-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_4-CODE_RUNNER_STORE_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_4",
      "target": "CODE_RUNNER_STORE_4",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_4-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_4-CODE_RUNNER_VALIDATION_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_4",
      "target": "CODE_RUNNER_VALIDATION_4",
      "sourceHandle": "CODE_RUNNER_STORE_4-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_4-USER_FEEDBACK_LOOP_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_4",
      "target": "USER_FEEDBACK_LOOP_4",
      "sourceHandle": "CODE_RUNNER_VALIDATION_4-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_5-CODE_RUNNER_ASK_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_5",
      "target": "CODE_RUNNER_ASK_5",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_5-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_5-LLM_LLM_ASK_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_5",
      "target": "LLM_LLM_ASK_5",
      "sourceHandle": "CODE_RUNNER_ASK_5-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_5-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_5-USER_FEEDBACK_LOOP_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_5",
      "target": "USER_FEEDBACK_LOOP_5",
      "sourceHandle": "LLM_LLM_ASK_5-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_5-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_5-CODE_RUNNER_RUN_VALIDATOR_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_5",
      "target": "CODE_RUNNER_RUN_VALIDATOR_5",
      "sourceHandle": "USER_FEEDBACK_LOOP_5-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_5-CODE_RUNNER_STORE_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_5",
      "target": "CODE_RUNNER_STORE_5",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_5-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_5-CODE_RUNNER_VALIDATION_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_5",
      "target": "CODE_RUNNER_VALIDATION_5",
      "sourceHandle": "CODE_RUNNER_STORE_5-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_5-USER_FEEDBACK_LOOP_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_5",
      "target": "USER_FEEDBACK_LOOP_5",
      "sourceHandle": "CODE_RUNNER_VALIDATION_5-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_6-CODE_RUNNER_ASK_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_6",
      "target": "CODE_RUNNER_ASK_6",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_6-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_6-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_6-LLM_LLM_ASK_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_6",
      "target": "LLM_LLM_ASK_6",
      "sourceHandle": "CODE_RUNNER_ASK_6-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_6-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_6-USER_FEEDBACK_LOOP_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_6",
      "target": "USER_FEEDBACK_LOOP_6",
      "sourceHandle": "LLM_LLM_ASK_6-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_6-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_6-CODE_RUNNER_RUN_VALIDATOR_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_6",
      "target": "CODE_RUNNER_RUN_VALIDATOR_6",
      "sourceHandle": "USER_FEEDBACK_LOOP_6-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_6-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_6-CODE_RUNNER_STORE_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_6",
      "target": "CODE_RUNNER_STORE_6",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_6-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_6-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_6-CODE_RUNNER_VALIDATION_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_6",
      "target": "CODE_RUNNER_VALIDATION_6",
      "sourceHandle": "CODE_RUNNER_STORE_6-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_6-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_6-USER_FEEDBACK_LOOP_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_6",
      "target": "USER_FEEDBACK_LOOP_6",
      "sourceHandle": "CODE_RUNNER_VALIDATION_6-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_6-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_7-CODE_RUNNER_ASK_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_7",
      "target": "CODE_RUNNER_ASK_7",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_7-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_7-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_7-LLM_LLM_ASK_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_7",
      "target": "LLM_LLM_ASK_7",
      "sourceHandle": "CODE_RUNNER_ASK_7-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_7-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_7-USER_FEEDBACK_LOOP_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_7",
      "target": "USER_FEEDBACK_LOOP_7",
      "sourceHandle": "LLM_LLM_ASK_7-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_7-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_7-CODE_RUNNER_RUN_VALIDATOR_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_7",
      "target": "CODE_RUNNER_RUN_VALIDATOR_7",
      "sourceHandle": "USER_FEEDBACK_LOOP_7-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_7-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_7-CODE_RUNNER_STORE_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_7",
      "target": "CODE_RUNNER_STORE_7",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_7-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_7-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_7-CODE_RUNNER_VALIDATION_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_7",
      "target": "CODE_RUNNER_VALIDATION_7",
      "sourceHandle": "CODE_RUNNER_STORE_7-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_7-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_7-USER_FEEDBACK_LOOP_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_7",
      "target": "USER_FEEDBACK_LOOP_7",
      "sourceHandle": "CODE_RUNNER_VALIDATION_7-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_7-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_8-CODE_RUNNER_ASK_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_8",
      "target": "CODE_RUNNER_ASK_8",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_8-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_8-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_8-LLM_LLM_ASK_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_8",
      "target": "LLM_LLM_ASK_8",
      "sourceHandle": "CODE_RUNNER_ASK_8-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_8-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_8-USER_FEEDBACK_LOOP_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_8",
      "target": "USER_FEEDBACK_LOOP_8",
      "sourceHandle": "LLM_LLM_ASK_8-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_8-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_8-CODE_RUNNER_RUN_VALIDATOR_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_8",
      "target": "CODE_RUNNER_RUN_VALIDATOR_8",
      "sourceHandle": "USER_FEEDBACK_LOOP_8-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_8-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_8-CODE_RUNNER_STORE_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_8",
      "target": "CODE_RUNNER_STORE_8",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_8-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_8-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_8-CODE_RUNNER_VALIDATION_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_8",
      "target": "CODE_RUNNER_VALIDATION_8",
      "sourceHandle": "CODE_RUNNER_STORE_8-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_8-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_8-USER_FEEDBACK_LOOP_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_8",
      "target": "USER_FEEDBACK_LOOP_8",
      "sourceHandle": "CODE_RUNNER_VALIDATION_8-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_8-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_9-CODE_RUNNER_ASK_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_9",
      "target": "CODE_RUNNER_ASK_9",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_9-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_9-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_9-LLM_LLM_ASK_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_9",
      "target": "LLM_LLM_ASK_9",
      "sourceHandle": "CODE_RUNNER_ASK_9-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_9-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_9-USER_FEEDBACK_LOOP_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_9",
      "target": "USER_FEEDBACK_LOOP_9",
      "sourceHandle": "LLM_LLM_ASK_9-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_9-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_9-CODE_RUNNER_RUN_VALIDATOR_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_9",
      "target": "CODE_RUNNER_RUN_VALIDATOR_9",
      "sourceHandle": "USER_FEEDBACK_LOOP_9-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_9-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_9-CODE_RUNNER_STORE_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_9",
      "target": "CODE_RUNNER_STORE_9",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_9-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_9-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_9-CODE_RUNNER_VALIDATION_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_9",
      "target": "CODE_RUNNER_VALIDATION_9",
      "sourceHandle": "CODE_RUNNER_STORE_9-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_9-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_9-USER_FEEDBACK_LOOP_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_9",
      "target": "USER_FEEDBACK_LOOP_9",
      "sourceHandle": "CODE_RUNNER_VALIDATION_9-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_9-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_10-CODE_RUNNER_ASK_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_10",
      "target": "CODE_RUNNER_ASK_10",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_10-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_10-LLM_LLM_ASK_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_10",
      "target": "LLM_LLM_ASK_10",
      "sourceHandle": "CODE_RUNNER_ASK_10-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_10-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_10-USER_FEEDBACK_LOOP_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_10",
      "target": "USER_FEEDBACK_LOOP_10",
      "sourceHandle": "LLM_LLM_ASK_10-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_10-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_10-CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_10",
      "target": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10",
      "sourceHandle": "USER_FEEDBACK_LOOP_10-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10-CODE_RUNNER_LLM_SKIP_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10",
      "target": "CODE_RUNNER_LLM_SKIP_10",
      "sourceHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_10-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_SKIP_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_10-LLM_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_10",
      "target": "LLM_10",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_10-output-onSuccess-xMessage",
      "targetHandle": "LLM_10-input-xmessage-xMessage"
    },
    {
      "id": "LLM_10-CODE_RUNNER_LLM_VALIDATOR_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_10",
      "target": "CODE_RUNNER_LLM_VALIDATOR_10",
      "sourceHandle": "LLM_10-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_VALIDATOR_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_10-CODE_RUNNER_STORE_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_VALIDATOR_10",
      "target": "CODE_RUNNER_STORE_10",
      "sourceHandle": "CODE_RUNNER_LLM_VALIDATOR_10-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_10-CODE_RUNNER_STORE_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_10",
      "target": "CODE_RUNNER_STORE_10",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_10-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_10-CODE_RUNNER_VALIDATION_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_10",
      "target": "CODE_RUNNER_VALIDATION_10",
      "sourceHandle": "CODE_RUNNER_STORE_10-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_10-USER_FEEDBACK_LOOP_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_10",
      "target": "USER_FEEDBACK_LOOP_10",
      "sourceHandle": "CODE_RUNNER_VALIDATION_10-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_11-CODE_RUNNER_ASK_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_11",
      "target": "CODE_RUNNER_ASK_11",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_11-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_11-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_11-LLM_LLM_ASK_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_11",
      "target": "LLM_LLM_ASK_11",
      "sourceHandle": "CODE_RUNNER_ASK_11-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_11-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_11-USER_FEEDBACK_LOOP_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_11",
      "target": "USER_FEEDBACK_LOOP_11",
      "sourceHandle": "LLM_LLM_ASK_11-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_11-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_11-CODE_RUNNER_RUN_VALIDATOR_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_11",
      "target": "CODE_RUNNER_RUN_VALIDATOR_11",
      "sourceHandle": "USER_FEEDBACK_LOOP_11-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_11-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_11-CODE_RUNNER_STORE_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_11",
      "target": "CODE_RUNNER_STORE_11",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_11-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_11-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_11-CODE_RUNNER_VALIDATION_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_11",
      "target": "CODE_RUNNER_VALIDATION_11",
      "sourceHandle": "CODE_RUNNER_STORE_11-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_11-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_11-USER_FEEDBACK_LOOP_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_11",
      "target": "USER_FEEDBACK_LOOP_11",
      "sourceHandle": "CODE_RUNNER_VALIDATION_11-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_11-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_12-CODE_RUNNER_ASK_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_12",
      "target": "CODE_RUNNER_ASK_12",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_12-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_12-LLM_LLM_ASK_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_12",
      "target": "LLM_LLM_ASK_12",
      "sourceHandle": "CODE_RUNNER_ASK_12-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_12-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_12-USER_FEEDBACK_LOOP_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_12",
      "target": "USER_FEEDBACK_LOOP_12",
      "sourceHandle": "LLM_LLM_ASK_12-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_12-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_12-CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_12",
      "target": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12",
      "sourceHandle": "USER_FEEDBACK_LOOP_12-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12-CODE_RUNNER_LLM_SKIP_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12",
      "target": "CODE_RUNNER_LLM_SKIP_12",
      "sourceHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_12-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_SKIP_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_12-LLM_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_12",
      "target": "LLM_12",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_12-output-onSuccess-xMessage",
      "targetHandle": "LLM_12-input-xmessage-xMessage"
    },
    {
      "id": "LLM_12-CODE_RUNNER_LLM_VALIDATOR_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_12",
      "target": "CODE_RUNNER_LLM_VALIDATOR_12",
      "sourceHandle": "LLM_12-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_VALIDATOR_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_12-CODE_RUNNER_STORE_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_VALIDATOR_12",
      "target": "CODE_RUNNER_STORE_12",
      "sourceHandle": "CODE_RUNNER_LLM_VALIDATOR_12-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_12-CODE_RUNNER_STORE_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_12",
      "target": "CODE_RUNNER_STORE_12",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_12-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_12-CODE_RUNNER_VALIDATION_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_12",
      "target": "CODE_RUNNER_VALIDATION_12",
      "sourceHandle": "CODE_RUNNER_STORE_12-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_12-USER_FEEDBACK_LOOP_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_12",
      "target": "USER_FEEDBACK_LOOP_12",
      "sourceHandle": "CODE_RUNNER_VALIDATION_12-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_13-CODE_RUNNER_ASK_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_13",
      "target": "CODE_RUNNER_ASK_13",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_13-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_13-LLM_LLM_ASK_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_13",
      "target": "LLM_LLM_ASK_13",
      "sourceHandle": "CODE_RUNNER_ASK_13-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_13-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_13-USER_FEEDBACK_LOOP_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_13",
      "target": "USER_FEEDBACK_LOOP_13",
      "sourceHandle": "LLM_LLM_ASK_13-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_13-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_13-CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_13",
      "target": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13",
      "sourceHandle": "USER_FEEDBACK_LOOP_13-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13-CODE_RUNNER_LLM_SKIP_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13",
      "target": "CODE_RUNNER_LLM_SKIP_13",
      "sourceHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_13-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_SKIP_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_13-LLM_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_13",
      "target": "LLM_13",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_13-output-onSuccess-xMessage",
      "targetHandle": "LLM_13-input-xmessage-xMessage"
    },
    {
      "id": "LLM_13-CODE_RUNNER_LLM_VALIDATOR_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_13",
      "target": "CODE_RUNNER_LLM_VALIDATOR_13",
      "sourceHandle": "LLM_13-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_VALIDATOR_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_13-CODE_RUNNER_STORE_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_VALIDATOR_13",
      "target": "CODE_RUNNER_STORE_13",
      "sourceHandle": "CODE_RUNNER_LLM_VALIDATOR_13-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_13-CODE_RUNNER_STORE_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_13",
      "target": "CODE_RUNNER_STORE_13",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_13-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_13-CODE_RUNNER_VALIDATION_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_13",
      "target": "CODE_RUNNER_VALIDATION_13",
      "sourceHandle": "CODE_RUNNER_STORE_13-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_13-USER_FEEDBACK_LOOP_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_13",
      "target": "USER_FEEDBACK_LOOP_13",
      "sourceHandle": "CODE_RUNNER_VALIDATION_13-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_14-CODE_RUNNER_ASK_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_14",
      "target": "CODE_RUNNER_ASK_14",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_14-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_14-LLM_LLM_ASK_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_14",
      "target": "LLM_LLM_ASK_14",
      "sourceHandle": "CODE_RUNNER_ASK_14-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_14-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_14-USER_FEEDBACK_LOOP_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_14",
      "target": "USER_FEEDBACK_LOOP_14",
      "sourceHandle": "LLM_LLM_ASK_14-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_14-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_14-CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_14",
      "target": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14",
      "sourceHandle": "USER_FEEDBACK_LOOP_14-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14-CODE_RUNNER_LLM_SKIP_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14",
      "target": "CODE_RUNNER_LLM_SKIP_14",
      "sourceHandle": "CODE_RUNNER_LLM_CURRENT_INPUT_STORE_14-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_SKIP_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_14-LLM_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_14",
      "target": "LLM_14",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_14-output-onSuccess-xMessage",
      "targetHandle": "LLM_14-input-xmessage-xMessage"
    },
    {
      "id": "LLM_14-CODE_RUNNER_LLM_VALIDATOR_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_14",
      "target": "CODE_RUNNER_LLM_VALIDATOR_14",
      "sourceHandle": "LLM_14-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_LLM_VALIDATOR_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_VALIDATOR_14-CODE_RUNNER_STORE_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_VALIDATOR_14",
      "target": "CODE_RUNNER_STORE_14",
      "sourceHandle": "CODE_RUNNER_LLM_VALIDATOR_14-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_LLM_SKIP_14-CODE_RUNNER_STORE_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_LLM_SKIP_14",
      "target": "CODE_RUNNER_STORE_14",
      "sourceHandle": "CODE_RUNNER_LLM_SKIP_14-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_14-CODE_RUNNER_VALIDATION_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_14",
      "target": "CODE_RUNNER_VALIDATION_14",
      "sourceHandle": "CODE_RUNNER_STORE_14-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_14-USER_FEEDBACK_LOOP_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_14",
      "target": "USER_FEEDBACK_LOOP_14",
      "sourceHandle": "CODE_RUNNER_VALIDATION_14-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_15-CODE_RUNNER_ASK_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_15",
      "target": "CODE_RUNNER_ASK_15",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_15-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_15-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_15-LLM_LLM_ASK_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_15",
      "target": "LLM_LLM_ASK_15",
      "sourceHandle": "CODE_RUNNER_ASK_15-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_15-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_15-USER_FEEDBACK_LOOP_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_15",
      "target": "USER_FEEDBACK_LOOP_15",
      "sourceHandle": "LLM_LLM_ASK_15-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_15-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_15-CODE_RUNNER_RUN_VALIDATOR_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_15",
      "target": "CODE_RUNNER_RUN_VALIDATOR_15",
      "sourceHandle": "USER_FEEDBACK_LOOP_15-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_15-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_15-CODE_RUNNER_STORE_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_15",
      "target": "CODE_RUNNER_STORE_15",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_15-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_15-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_15-CODE_RUNNER_VALIDATION_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_15",
      "target": "CODE_RUNNER_VALIDATION_15",
      "sourceHandle": "CODE_RUNNER_STORE_15-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_15-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_15-USER_FEEDBACK_LOOP_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_15",
      "target": "USER_FEEDBACK_LOOP_15",
      "sourceHandle": "CODE_RUNNER_VALIDATION_15-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_15-input-xmessage-xMessage"
    },
    {
      "id": "start-CODE_RUNNER_isVISIBLE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "start",
      "target": "CODE_RUNNER_isVISIBLE_0",
      "sourceHandle": "start-output-startPointer-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_0-CODE_RUNNER_isVISIBLE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_0",
      "target": "CODE_RUNNER_isVISIBLE_1",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_0-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_0-CODE_RUNNER_isVISIBLE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_0",
      "target": "CODE_RUNNER_isVISIBLE_1",
      "sourceHandle": "CODE_RUNNER_STORE_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1-CODE_RUNNER_isVISIBLE_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_1",
      "target": "CODE_RUNNER_isVISIBLE_2",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_1-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_1-CODE_RUNNER_isVISIBLE_2",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_1",
      "target": "CODE_RUNNER_isVISIBLE_2",
      "sourceHandle": "CODE_RUNNER_STORE_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_2-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_2-CODE_RUNNER_isVISIBLE_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_2",
      "target": "CODE_RUNNER_isVISIBLE_3",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_2-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_2-CODE_RUNNER_isVISIBLE_3",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_2",
      "target": "CODE_RUNNER_isVISIBLE_3",
      "sourceHandle": "CODE_RUNNER_STORE_2-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_3-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_3-CODE_RUNNER_isVISIBLE_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_3",
      "target": "CODE_RUNNER_isVISIBLE_4",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_3-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_3-CODE_RUNNER_isVISIBLE_4",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_3",
      "target": "CODE_RUNNER_isVISIBLE_4",
      "sourceHandle": "CODE_RUNNER_STORE_3-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_4-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_4-CODE_RUNNER_isVISIBLE_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_4",
      "target": "CODE_RUNNER_isVISIBLE_5",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_4-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_4-CODE_RUNNER_isVISIBLE_5",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_4",
      "target": "CODE_RUNNER_isVISIBLE_5",
      "sourceHandle": "CODE_RUNNER_STORE_4-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_5-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_5-CODE_RUNNER_isVISIBLE_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_5",
      "target": "CODE_RUNNER_isVISIBLE_6",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_5-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_6-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_5-CODE_RUNNER_isVISIBLE_6",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_5",
      "target": "CODE_RUNNER_isVISIBLE_6",
      "sourceHandle": "CODE_RUNNER_STORE_5-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_6-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_6-CODE_RUNNER_isVISIBLE_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_6",
      "target": "CODE_RUNNER_isVISIBLE_7",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_6-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_7-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_6-CODE_RUNNER_isVISIBLE_7",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_6",
      "target": "CODE_RUNNER_isVISIBLE_7",
      "sourceHandle": "CODE_RUNNER_STORE_6-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_7-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_7-CODE_RUNNER_isVISIBLE_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_7",
      "target": "CODE_RUNNER_isVISIBLE_8",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_7-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_8-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_7-CODE_RUNNER_isVISIBLE_8",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_7",
      "target": "CODE_RUNNER_isVISIBLE_8",
      "sourceHandle": "CODE_RUNNER_STORE_7-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_8-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_8-CODE_RUNNER_isVISIBLE_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_8",
      "target": "CODE_RUNNER_isVISIBLE_9",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_8-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_9-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_8-CODE_RUNNER_isVISIBLE_9",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_8",
      "target": "CODE_RUNNER_isVISIBLE_9",
      "sourceHandle": "CODE_RUNNER_STORE_8-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_9-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_9-CODE_RUNNER_isVISIBLE_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_9",
      "target": "CODE_RUNNER_isVISIBLE_10",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_9-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_9-CODE_RUNNER_isVISIBLE_10",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_9",
      "target": "CODE_RUNNER_isVISIBLE_10",
      "sourceHandle": "CODE_RUNNER_STORE_9-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_10-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_10-CODE_RUNNER_isVISIBLE_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_10",
      "target": "CODE_RUNNER_isVISIBLE_11",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_10-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_11-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_10-CODE_RUNNER_isVISIBLE_11",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_10",
      "target": "CODE_RUNNER_isVISIBLE_11",
      "sourceHandle": "CODE_RUNNER_STORE_10-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_11-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_11-CODE_RUNNER_isVISIBLE_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_11",
      "target": "CODE_RUNNER_isVISIBLE_12",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_11-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_11-CODE_RUNNER_isVISIBLE_12",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_11",
      "target": "CODE_RUNNER_isVISIBLE_12",
      "sourceHandle": "CODE_RUNNER_STORE_11-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_12-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_12-CODE_RUNNER_isVISIBLE_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_12",
      "target": "CODE_RUNNER_isVISIBLE_13",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_12-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_12-CODE_RUNNER_isVISIBLE_13",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_12",
      "target": "CODE_RUNNER_isVISIBLE_13",
      "sourceHandle": "CODE_RUNNER_STORE_12-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_13-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_13-CODE_RUNNER_isVISIBLE_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_13",
      "target": "CODE_RUNNER_isVISIBLE_14",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_13-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_13-CODE_RUNNER_isVISIBLE_14",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_13",
      "target": "CODE_RUNNER_isVISIBLE_14",
      "sourceHandle": "CODE_RUNNER_STORE_13-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_14-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_14-CODE_RUNNER_isVISIBLE_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_14",
      "target": "CODE_RUNNER_isVISIBLE_15",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_14-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_15-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_14-CODE_RUNNER_isVISIBLE_15",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_14",
      "target": "CODE_RUNNER_isVISIBLE_15",
      "sourceHandle": "CODE_RUNNER_STORE_14-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_15-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_15-CODE_RUNNER_END",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_15",
      "target": "CODE_RUNNER_END",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_15-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_END-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_15-CODE_RUNNER_END",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_15",
      "target": "CODE_RUNNER_END",
      "sourceHandle": "CODE_RUNNER_STORE_15-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_END-input-xmessage-xMessage"
    }
  ],
  "viewport": {
    "x": -89.25227931693917,
    "y": 282.4605317435965,
    "zoom": 0.4464677076656672
  },
  "name": ""
}
