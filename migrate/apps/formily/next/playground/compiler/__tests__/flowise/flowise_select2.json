{
  "nodes": [
    {
      "id": "start",
      "data": {
        "id": "start",
        "name": "start",
        "type": "Output",
        "label": "Start",
        "inputs": {},
        "outputs": {
          "startPointer": ""
        },
        "category": "Miscellaneous",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "Start pointer Points to node  ",
        "inputParams": [],
        "inputAnchors": [],
        "outputAnchors": [
          {
            "id": "start-output-startPointer-xMessage",
            "name": "startPointer",
            "type": "xMessage",
            "label": "start Pointer"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 113,
      "dragging": false,
      "position": {
        "x": 409.5560193025037,
        "y": 25.92199759211908
      },
      "selected": false,
      "positionAbsolute": {
        "x": 409.5560193025037,
        "y": 25.92199759211908
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_END",
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "type": "customNode",
      "data": {
        "label": "Code Runner Transformer",
        "name": "CODE_RUNNER",
        "type": "Output",
        "category": "GenericTransformer",
        "description": "A code runner capable of running custom JS code.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_5.data.instance",
            "CODE_RUNNER_STORE_5.data.instance",
            "CODE_RUNNER_isVISIBLE_15.data.instance",
            "CODE_RUNNER_STORE_15.data.instance",
            "CODE_RUNNER_isVISIBLE_2.data.instance",
            "CODE_RUNNER_STORE_2.data.instance",
            "CODE_RUNNER_isVISIBLE_0.data.instance",
            "CODE_RUNNER_STORE_0.data.instance",
            "CODE_RUNNER_isVISIBLE_2.data.instance",
            "CODE_RUNNER_STORE_2.data.instance",
            "CODE_RUNNER_isVISIBLE_0.data.instance",
            "CODE_RUNNER_STORE_0.data.instance",
            "CODE_RUNNER_isVISIBLE_1.data.instance",
            "CODE_RUNNER_STORE_1.data.instance"
          ],
          "code": "const msg = JSON.parse($0);\n\n    msg.payload.text = \"Thank you for completing the registration. Your responses have been recorded. Have a great day!\\n Your recorded answers are: \\n\";\n  \n    const formInput = msg.transformer.metaData.formInput;\n    if(formInput){\n      Object.keys(formInput).forEach((key) => {\n        msg.payload.text += key + \": \" + formInput[key] + \"\\n\";\n      });\n    }\n  return JSON.stringify(msg);"
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "CODE_RUNNER_END-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "Code",
            "name": "code",
            "type": "ide",
            "rows": 2,
            "id": "CODE_RUNNER_END-input-code-ide"
          },
          {
            "id": "CODE_RUNNER_END-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_END-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "CODE_RUNNER_END-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "CODE_RUNNER_END",
        "selected": false
      },
      "width": 300,
      "height": 569,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_0",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"62q7t4xz4kk\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": ["start.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_0",
      "data": {
        "id": "CODE_RUNNER_ASK_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Select Your Class\";\nmsg.transformer.metaData.currentQuestion=\"Select Your Class\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Select Your Class`;\n  msg.payload.buttonChoices ={\"header\":\"Select Your Class\",\"choices\":[{\"key\":\"class-1-key\",\"text\":\"Class 1\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"class-2-key\",\"text\":\"Class 2\",\"isEnabled\":true,\"showTextInput\":true}]};\n\n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"62q7t4xz4kk\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"62q7t4xz4kk\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_0",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_0.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_0-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_0-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_0-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_0-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_0-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_0-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_0-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_0",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_0",
      "data": {
        "id": "USER_FEEDBACK_LOOP_0",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_0.data.instance",
            "CODE_RUNNER_VALIDATION_0.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_0-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_0",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"62q7t4xz4kk\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"62q7t4xz4kk\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"62q7t4xz4kk\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"62q7t4xz4kk\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_0",
      "data": {
        "id": "CODE_RUNNER_STORE_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"62q7t4xz4kk\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"62q7t4xz4kk\": \"\"};\n      } else {\n        formInput = {\"62q7t4xz4kk\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"62q7t4xz4kk\"].text;\n    if(formInput){\n      formInput = {...formInput, \"62q7t4xz4kk\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"62q7t4xz4kk\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_0",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_0",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"62q7t4xz4kk\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"62q7t4xz4kk\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"62q7t4xz4kk\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_0.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_0-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_0-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1",
      "data": {
        "id": "CODE_RUNNER_isVISIBLE_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nlet formInput = msg.transformer.metaData.formInput;\nif(!(true)) throw new Error('Not Visible');\nmsg.transformer.metaData.required = {\"kopukmb7qkz\" : false};\nreturn JSON.stringify(msg);",
          "xmessage": [
            "CODE_RUNNER_isVISIBLE_0.data.instance",
            "CODE_RUNNER_STORE_0.data.instance"
          ]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_isVISIBLE_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_isVISIBLE_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_ASK_1",
      "data": {
        "id": "CODE_RUNNER_ASK_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nmsg.payload.text = \"Select your Favourite Sport\";\nmsg.transformer.metaData.currentQuestion=\"Select your Favourite Sport\"\n\n    msg.transformer.metaData.prompt = `\n    Given the description of a field for the 10th standard board exam registration form in India, generate a warm, conversational question that is clear and supportive. Ensure the question is concise, friendly, and focused on getting the needed information without extra wording.\n    The Description is Select your Favourite Sport`;\n  msg.payload.buttonChoices ={\"header\":\"Select your Favourite Sport\",\"choices\":[{\"key\":\"s5ukwcjdl5q\",\"text\":\"Cricket\",\"isEnabled\":true,\"showTextInput\":true},{\"key\":\"lwhu2kl7ska\",\"text\":\"Football\",\"isEnabled\":true,\"showTextInput\":true}]};\n\n    const currentInput = msg.transformer.metaData.currentInput;\n    if(currentInput){\n      currentInput[\"kopukmb7qkz\"] = {\n        text: \"\",\n        retries: 0\n      };\n    }\n    else {\n      msg.transformer.metaData.currentInput = {\n        \"kopukmb7qkz\": {\n          text: \"\",\n          retries: 0\n        }\n      };  \n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_isVISIBLE_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_ASK_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_ASK_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_ASK_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_ASK_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "LLM_LLM_ASK_1",
      "position": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "type": "customNode",
      "data": {
        "label": "LLM Transformer",
        "category": "GenericTransformer",
        "name": "LLM",
        "description": "A general LLM model based transformer.",
        "baseClasses": ["xMessage"],
        "inputs": {
          "xmessage": ["CODE_RUNNER_ASK_1.data.instance"],
          "APIKey": "sk-proj-",
          "model": "gpt-4o-mini",
          "prompt": "",
          "corpusPrompt": "",
          "temperature": "",
          "enableStream": false,
          "outputLanguage": "",
          "outboundURL": "",
          "bhashiniUserId": "",
          "bhashiniAPIKey": "",
          "bhashiniURL": "",
          "provider": "",
          "contextLength": "",
          "languageProvider": ""
        },
        "outputs": {
          "onSuccess": "",
          "onError": ""
        },
        "inputAnchors": [
          {
            "label": "XMessage",
            "name": "xmessage",
            "type": "xMessage",
            "list": true,
            "id": "LLM_LLM_ASK_1-input-xmessage-xMessage"
          }
        ],
        "inputParams": [
          {
            "label": "API Key",
            "name": "APIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-APIKey-string"
          },
          {
            "label": "Model",
            "name": "model",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-model-string"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-prompt-string"
          },
          {
            "label": "Corpus Prompt",
            "name": "corpusPrompt",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-corpusPrompt-string"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "id": "LLM_LLM_ASK_1-input-temperature-number"
          },
          {
            "label": "Enable Stream",
            "name": "enableStream",
            "type": "boolean",
            "id": "LLM_LLM_ASK_1-input-enableStream-boolean"
          },
          {
            "label": "Output Language",
            "name": "outputLanguage",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-outputLanguage-string"
          },
          {
            "label": "Outbound URL",
            "name": "outboundURL",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-outboundURL-string"
          },
          {
            "label": "Bhashini User ID",
            "name": "bhashiniUserId",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniUserId-string"
          },
          {
            "label": "Bhashini API Key",
            "name": "bhashiniAPIKey",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniAPIKey-string"
          },
          {
            "label": "Bhashini URL",
            "name": "bhashiniURL",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-bhashiniURL-string"
          },
          {
            "label": "Provider",
            "name": "provider",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-provider-string"
          },
          {
            "label": "Context Length",
            "name": "contextLength",
            "type": "number",
            "id": "LLM_LLM_ASK_1-input-contextLength-number"
          },
          {
            "label": "Language Provider",
            "name": "languageProvider",
            "type": "string",
            "id": "LLM_LLM_ASK_1-input-languageProvider-string"
          },
          {
            "id": "LLM_LLM_ASK_1-input-sideEffects-json",
            "label": "SideEffects",
            "name": "sideEffects",
            "rows": 2,
            "type": "json"
          }
        ],
        "outputAnchors": [
          {
            "id": "LLM_LLM_ASK_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "label": "On Success",
            "type": "xMessage"
          },
          {
            "id": "LLM_LLM_ASK_1-output-onError-xMessage",
            "name": "onError",
            "label": "On Error",
            "type": "xMessage"
          }
        ],
        "id": "LLM_LLM_ASK_1",
        "selected": false
      },
      "width": 300,
      "height": 1690,
      "selected": false,
      "positionAbsolute": {
        "x": 3988.7271438010634,
        "y": -661.3071523540692
      },
      "dragging": false
    },
    {
      "id": "USER_FEEDBACK_LOOP_1",
      "data": {
        "id": "USER_FEEDBACK_LOOP_1",
        "name": "USER_FEEDBACK_LOOP",
        "type": "Output",
        "label": "User Feedback Loop",
        "inputs": {
          "xmessage": [
            "LLM_LLM_ASK_1.data.instance",
            "CODE_RUNNER_VALIDATION_1.data.instance"
          ]
        },
        "outputs": {
          "restoreState": ""
        },
        "category": "StateRestoreTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A transformer which restores state to a specific node after sending a message to user.",
        "inputParams": [
          {
            "id": "USER_FEEDBACK_LOOP_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "USER_FEEDBACK_LOOP_1-output-restoreState-xMessage",
            "name": "restoreState",
            "type": "xMessage",
            "label": "Restore State"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_1",
      "data": {
        "id": "CODE_RUNNER_RUN_VALIDATOR_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\nfunction emailValidator(data) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n  const error = emailRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid email' : 'Thanks for your response',\n  }\n}\n\nfunction urlValidator(data) {\n  const urlRegex = /^(http|https):\\/\\/[^ \"]+$/\n  const error = urlRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid URL' : 'Thanks for your response',\n  }\n}\n\nfunction numberValidator(data) {\n  const numberRegex = /^\\d+$/\n  const error = numberRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid number' : 'Thanks for your response',\n  }\n}\n\nfunction dateValidator(data) {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/\n  const error = dateRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid date' : 'Thanks for your response',\n  }\n}\n\nfunction phoneValidator(data) {\n  const phoneRegex = /^(\\+91[-\\s]?)?[6-9]\\d{9}$/\n  const error = phoneRegex.test(data)\n  return {\n    error: !error,\n    message: !error ? 'Your response is not a valid phone number' : 'Thanks for your response',\n  }\n}\n\nconst validator = {\n  url: urlValidator,\n  email: emailValidator,\n  date: dateValidator,\n  number: numberValidator,\n  phone: phoneValidator,\n}\n    if(!msg.transformer.metaData.validationResult) {\n      msg.transformer.metaData.validationResult = {\n        \"kopukmb7qkz\": {}\n      };\n    }\n    else{\n      msg.transformer.metaData.validationResult = {\n        \"kopukmb7qkz\": {}\n      };\n    }\n  \n  if(msg.payload.text == \"SKIP\") {\n    msg.transformer.metaData.validationResult[\"kopukmb7qkz\"] = {\n      \"skip-validation\": {\n        error: false,\n        message: \"User Skipped the message\"\n      }\n    }\n    return JSON.stringify(msg);\n  }\n  \n  msg.transformer.metaData.currentInput[\"kopukmb7qkz\"].text = msg.payload.text;\n  return JSON.stringify(msg);",
          "xmessage": ["USER_FEEDBACK_LOOP_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_RUN_VALIDATOR_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_STORE_1",
      "data": {
        "id": "CODE_RUNNER_STORE_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    if(msg.transformer.metaData.validationResult[\"kopukmb7qkz\"][\"skip-validation\"]){\n      let formInput = msg.transformer.metaData.formInput;\n      if(formInput){\n        formInput = {...formInput, \"kopukmb7qkz\": \"\"};\n      } else {\n        formInput = {\"kopukmb7qkz\": \"\"}\n      }\n      msg.transformer.metaData.formInput = formInput;\n      return JSON.stringify(msg);\n    }\n  \n    let formInput = msg.transformer.metaData.formInput;\n    const inputText = msg.transformer.metaData.currentInput[\"kopukmb7qkz\"].text;\n    if(formInput){\n      formInput = {...formInput, \"kopukmb7qkz\": inputText !=\"SKIP\" ? inputText : \"\"};\n    } else {\n      formInput = {\"kopukmb7qkz\": inputText !=\"SKIP\" ? inputText : \"\"};\n    }\n    msg.transformer.metaData.formInput = formInput;\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_RUN_VALIDATOR_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_STORE_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_STORE_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_STORE_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_STORE_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    },
    {
      "id": "CODE_RUNNER_VALIDATION_1",
      "data": {
        "id": "CODE_RUNNER_VALIDATION_1",
        "name": "CODE_RUNNER",
        "type": "Output",
        "label": "Code Runner Transformer",
        "inputs": {
          "code": "const msg = JSON.parse($0);\n\n    msg.transformer.metaData.currentInput[\"kopukmb7qkz\"].retries += 1; \n  \n    if(msg.transformer.metaData.currentInput[\"kopukmb7qkz\"].retries >= 2) {\n      if(!msg.transformer.metaData.required[\"kopukmb7qkz\"]){\n        msg.payload.text = \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field. Contact the admin if you want to restart the survey.\";\n        msg.payload.buttonChoices = {\n          header: \"You have exceeded the number of retries for this field. If you wish you can Use the 'SKIP' button to skip this field.\",\n          choices: [\n          {\n            text: \"SKIP\",\n            key: \"SKIP\",\n            isEnabled: true,\n            showTextInput: true\n          },\n          ]\n        }\n      }else{\n        msg.payload.text += \" This is a mandatory question you can't skip it.\";\n      }\n    }\n  return JSON.stringify(msg);",
          "xmessage": ["CODE_RUNNER_STORE_1.data.instance"]
        },
        "outputs": {
          "onError": "",
          "onSuccess": ""
        },
        "category": "GenericTransformer",
        "selected": false,
        "baseClasses": ["xMessage"],
        "description": "A code runner capable of running custom JS code.",
        "inputParams": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-code-ide",
            "name": "code",
            "rows": 2,
            "type": "ide",
            "label": "Code"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-sideEffects-json",
            "name": "sideEffects",
            "rows": 2,
            "type": "json",
            "label": "SideEffects"
          }
        ],
        "inputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-input-xmessage-xMessage",
            "list": true,
            "name": "xmessage",
            "type": "xMessage",
            "label": "XMessage"
          }
        ],
        "outputAnchors": [
          {
            "id": "CODE_RUNNER_VALIDATION_1-output-onSuccess-xMessage",
            "name": "onSuccess",
            "type": "xMessage",
            "label": "On Success"
          },
          {
            "id": "CODE_RUNNER_VALIDATION_1-output-onError-xMessage",
            "name": "onError",
            "type": "xMessage",
            "label": "On Error"
          }
        ]
      },
      "type": "customNode",
      "width": 300,
      "height": 569,
      "dragging": false,
      "position": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "selected": false,
      "positionAbsolute": {
        "x": 3255.789032183661,
        "y": -141.0959960862705
      },
      "style": {}
    }
  ],
  "edges": [
    {
      "id": "CODE_RUNNER_isVISIBLE_0-CODE_RUNNER_ASK_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_0",
      "target": "CODE_RUNNER_ASK_0",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_0-LLM_LLM_ASK_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_0",
      "target": "LLM_LLM_ASK_0",
      "sourceHandle": "CODE_RUNNER_ASK_0-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_0-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_0-USER_FEEDBACK_LOOP_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_0",
      "target": "USER_FEEDBACK_LOOP_0",
      "sourceHandle": "LLM_LLM_ASK_0-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_0-CODE_RUNNER_RUN_VALIDATOR_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_0",
      "target": "CODE_RUNNER_RUN_VALIDATOR_0",
      "sourceHandle": "USER_FEEDBACK_LOOP_0-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_0-CODE_RUNNER_STORE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_0",
      "target": "CODE_RUNNER_STORE_0",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_0-CODE_RUNNER_VALIDATION_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_0",
      "target": "CODE_RUNNER_VALIDATION_0",
      "sourceHandle": "CODE_RUNNER_STORE_0-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_0-USER_FEEDBACK_LOOP_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_0",
      "target": "USER_FEEDBACK_LOOP_0",
      "sourceHandle": "CODE_RUNNER_VALIDATION_0-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1-CODE_RUNNER_ASK_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_1",
      "target": "CODE_RUNNER_ASK_1",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_ASK_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_ASK_1-LLM_LLM_ASK_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_ASK_1",
      "target": "LLM_LLM_ASK_1",
      "sourceHandle": "CODE_RUNNER_ASK_1-output-onSuccess-xMessage",
      "targetHandle": "LLM_LLM_ASK_1-input-xmessage-xMessage"
    },
    {
      "id": "LLM_LLM_ASK_1-USER_FEEDBACK_LOOP_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "LLM_LLM_ASK_1",
      "target": "USER_FEEDBACK_LOOP_1",
      "sourceHandle": "LLM_LLM_ASK_1-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage"
    },
    {
      "id": "USER_FEEDBACK_LOOP_1-CODE_RUNNER_RUN_VALIDATOR_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "USER_FEEDBACK_LOOP_1",
      "target": "CODE_RUNNER_RUN_VALIDATOR_1",
      "sourceHandle": "USER_FEEDBACK_LOOP_1-output-restoreState-xMessage",
      "targetHandle": "CODE_RUNNER_RUN_VALIDATOR_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_RUN_VALIDATOR_1-CODE_RUNNER_STORE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_RUN_VALIDATOR_1",
      "target": "CODE_RUNNER_STORE_1",
      "sourceHandle": "CODE_RUNNER_RUN_VALIDATOR_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_STORE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_1-CODE_RUNNER_VALIDATION_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_1",
      "target": "CODE_RUNNER_VALIDATION_1",
      "sourceHandle": "CODE_RUNNER_STORE_1-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_VALIDATION_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_VALIDATION_1-USER_FEEDBACK_LOOP_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_VALIDATION_1",
      "target": "USER_FEEDBACK_LOOP_1",
      "sourceHandle": "CODE_RUNNER_VALIDATION_1-output-onSuccess-xMessage",
      "targetHandle": "USER_FEEDBACK_LOOP_1-input-xmessage-xMessage"
    },
    {
      "id": "start-CODE_RUNNER_isVISIBLE_0",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "start",
      "target": "CODE_RUNNER_isVISIBLE_0",
      "sourceHandle": "start-output-startPointer-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_0-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_0-CODE_RUNNER_isVISIBLE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_0",
      "target": "CODE_RUNNER_isVISIBLE_1",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_0-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_0-CODE_RUNNER_isVISIBLE_1",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_0",
      "target": "CODE_RUNNER_isVISIBLE_1",
      "sourceHandle": "CODE_RUNNER_STORE_0-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_isVISIBLE_1-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_isVISIBLE_1-CODE_RUNNER_END",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_isVISIBLE_1",
      "target": "CODE_RUNNER_END",
      "sourceHandle": "CODE_RUNNER_isVISIBLE_1-output-onError-xMessage",
      "targetHandle": "CODE_RUNNER_END-input-xmessage-xMessage"
    },
    {
      "id": "CODE_RUNNER_STORE_1-CODE_RUNNER_END",
      "data": {
        "label": ""
      },
      "type": "buttonedge",
      "source": "CODE_RUNNER_STORE_1",
      "target": "CODE_RUNNER_END",
      "sourceHandle": "CODE_RUNNER_STORE_1-output-onSuccess-xMessage",
      "targetHandle": "CODE_RUNNER_END-input-xmessage-xMessage"
    }
  ],
  "viewport": {
    "x": -89.25227931693917,
    "y": 282.4605317435965,
    "zoom": 0.4464677076656672
  },
  "name": ""
}
